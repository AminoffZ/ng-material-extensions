{"version":3,"sources":["../../../projects/cdk-table-exporter/src/lib/cdk-table-exporter.module.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/cdk-table-exporter/src/lib/export-type.ts","../../../projects/cdk-table-exporter/src/lib/services/data-extractor.service.ts","../../../projects/cdk-table-exporter/src/lib/mime.ts","../../../projects/cdk-table-exporter/src/lib/constants.ts","../../../projects/cdk-table-exporter/src/lib/file-util.ts","../../../projects/cdk-table-exporter/src/lib/services/exporters/file-exporter.ts","../../../projects/cdk-table-exporter/src/lib/services/exporters/worksheet-exporter.ts","../../../projects/cdk-table-exporter/src/lib/services/exporters/csv-exporter.service.ts","../../../projects/cdk-table-exporter/src/lib/services/exporters/txt-exporter.service.ts","../../../projects/cdk-table-exporter/src/lib/services/exporters/xls-exporter.service.ts","../../../projects/cdk-table-exporter/src/lib/services/exporters/json-exporter.service.ts","../../../projects/cdk-table-exporter/src/lib/services/exporters/xlsx-exporter.service.ts","../../../projects/cdk-table-exporter/src/lib/services/service-locator.service.ts","../../../projects/cdk-table-exporter/src/lib/cdk-table-exporter.ts"],"names":["NgModule","args","declarations","imports","CdkTableModule","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","ExportType","DataExtractorService","extractRows","cdkTable","hiddenColumns","outlet","getRowsAsJsonArray","_rowOutlet","renderedRows","getRenderedRows","convertToJsonArray","_getRenderedRows","rows","result","row","convertRow","createExcelItem","cells","children","shouldHide","element","item","trim","columnIndex","includes","assign","Injectable","providedIn","extension","contentTypeHeader","MAT_TABLE_EXPORTER","TYPE_ARRAY","CHAR_SET_UTF","CHAR_SET_UTF_8","CONTENT_TYPE_TEXT","TXT","CONTENT_TYPE_APPLICATION","CONTENT_TYPE_EXCEL","DOT","EXTENSION_XLS","XLS","EXTENSION_XLSX","XLSX","EXTENSION_CSV","CSV","EXTENSION_JSON","JSON","EXTENSION_TEXT","MIME_EXCEL_XLS","Mime","MIME_EXCEL_XLSX","MIME_JSON","MIME_TXT","MIME_CSV","XLS_REGEX","XLSX_COLS","FileUtil","save","content","mime","options","blob","Blob","type","fileName","FileSaver.saveAs","isXls","toLowerCase","match","identifyExportType","removeExtension","split","FileExporter","export","Error","createContent","mimeType","getMimeType","WorksheetExporter","_super","workSheet","XLSX.utils","json_to_sheet","skipHeader","workSheetToContent","CsvExporterService","worksheet","sheet_to_csv","FS","_a","delimiter","TxtExporterService","_this","forEach","values","join","getDelimiter","XlsExporterService","workBook","book_new","columnWidths","convertToWch","correctTypes","book_append_sheet","sheet","XLSX.write","bookType","replace","map","width","wch","JsonExporterService","stringify","XlsxExporterService","ServiceLocatorService","injector","getService","exportType","valueOf","get","OTHER","Injector","CdkTableExporter","renderer","serviceLocator","dataExtractor","_cdkTable","exportCompleted","EventEmitter","exportStarted","exportTable","loadExporter","_options","emit","_isIterating","_isExporting","_data","extractTableHeader","exportWithPagination","notPaginated","exportSinglePage","toggleRow","index","paginatedRowIndex","getPaginatedRowIndex","isToggleOn","toggleOff","toggleOn","resetToggleRows","_selectedRows","filter","x","_exporterService","exporter","_initialPageIndex","getCurrentPageIndex","initPageHandler","goToPage","extractDataOnCurrentPage","extractTableFooter","exportExtractedData","getSelectedRows","isSelectiveExport","_","isMasterToggleOff","isMasterToggleOn","compareSelectedRowCount","getTotalItemsCount","rowCount","_subscription","getPageChangeObservable","subscribe","setTimeout","hasNextPage","nextPage","extractSpecialRows","_b","apply","_headerRowOutlet","_footerRowOutlet","getPageCount","getPageSize","Directive","Renderer2","Input","Output"],"mappings":"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","sourcesContent":["import { CdkTableModule } from '@angular/cdk/table';\r\nimport { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CdkTableModule\r\n  ],\r\n  exports: []\r\n})\r\nexport class CdkTableExporterModule { }\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","export enum ExportType {\r\n  XLS = 'xls',\r\n  XLSX = 'xlsx',\r\n  CSV = 'csv',\r\n  TXT = 'txt',\r\n  JSON = 'json',\r\n  OTHER = 'other'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DataRowOutlet } from '@angular/cdk/table';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataExtractorService {\r\n\r\n  constructor() { }\r\n\r\n  public extractRows(cdkTable: any, hiddenColumns: Array<any>, outlet?: DataRowOutlet): Array<any> {\r\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet ?? cdkTable._rowOutlet);\r\n  }\r\n\r\n  private getRowsAsJsonArray(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\r\n    const renderedRows = this.getRenderedRows(cdkTable, outlet);\r\n    return this.convertToJsonArray(hiddenColumns, renderedRows);\r\n  }\r\n\r\n  private getRenderedRows(cdkTable: any, outlet: DataRowOutlet): HTMLTableRowElement[] {\r\n    return cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\r\n  }\r\n\r\n  private convertToJsonArray(hiddenColumns: Array<any>, rows: HTMLTableRowElement[]): Array<any> {\r\n    const result = new Array<any>();\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < rows.length; i++) {\r\n      const row: Array<string> = this.convertRow(hiddenColumns, rows[i]);\r\n      result.push(this.createExcelItem(row));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private convertRow(hiddenColumns: Array<any>, row: HTMLTableRowElement): Array<string> {\r\n    const result = new Array<string>();\r\n    const cells: any = row.children;\r\n    for (let i = 0; i < cells.length; i++) {\r\n      if (!this.shouldHide(hiddenColumns, i)) {\r\n        const element = (cells.item(i).innerText).trim();\r\n        result.push(element);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private shouldHide(hiddenColumns: Array<any>, columnIndex: number) {\r\n    if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private createExcelItem(row: Array<string>): any {\r\n    return Object.assign({}, row);\r\n  }\r\n}\r\n","export class Mime {\r\n\r\n  extension: string;\r\n  contentTypeHeader: string;\r\n\r\n  constructor(extension: string, contentTypeHeader: string) {\r\n    this.extension = extension;\r\n    this.contentTypeHeader = contentTypeHeader;\r\n  }\r\n\r\n}\r\n","import { ExportType } from './export-type';\r\nimport { Mime } from './mime';\r\n\r\nexport const MAT_TABLE_EXPORTER = 'mat-table-exporter';\r\nexport const TYPE_ARRAY = 'array';\r\nexport const CHAR_SET_UTF = ';charset=utf-';\r\nexport const CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\r\nexport const CONTENT_TYPE_TEXT = ExportType.TXT + '/';\r\nexport const CONTENT_TYPE_APPLICATION = 'application/';\r\nexport const CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\r\nexport const DOT = '.';\r\nexport const COMMA = ',';\r\nexport const EXTENSION_XLS = DOT + ExportType.XLS;\r\nexport const EXTENSION_XLSX =  DOT + ExportType.XLSX;\r\nexport const EXTENSION_CSV =  DOT + ExportType.CSV;\r\nexport const EXTENSION_JSON =  DOT + ExportType.JSON;\r\nexport const EXTENSION_TEXT =  DOT + ExportType.TXT;\r\nexport const MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\r\nexport const MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\r\nexport const MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\r\nexport const REF = '!ref';\r\nexport const XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\r\nexport const RETURN = '\\n';\r\nexport const TAB = '\\t';\r\nexport const XLSX_COLS = '!cols';\r\nexport const BOM = '\\uFEFF';\r\n","import { ExportType } from './export-type';\r\nimport * as FileSaver from 'file-saver-es';\r\nimport { MAT_TABLE_EXPORTER, DOT, XLS_REGEX } from './constants';\r\nimport { Mime } from './mime';\r\nimport { Options } from './options';\r\n\r\nexport class FileUtil {\r\n  public static save(content: string, mime: Mime, options?: Options) {\r\n    const blob = new Blob([content], {type: mime.contentTypeHeader});\r\n    let fileName = MAT_TABLE_EXPORTER;\r\n    if (options && options.fileName) {\r\n      fileName = options.fileName;\r\n    }\r\n    FileSaver.saveAs(blob, fileName + mime.extension);\r\n  }\r\n\r\n  public static isXls(fileName: string): boolean {\r\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\r\n  }\r\n\r\n  public static identifyExportType(fileName?: string): ExportType {\r\n    if (fileName && FileUtil.isXls(fileName)) {\r\n      return ExportType.XLS;\r\n    } else {\r\n      return ExportType.XLSX;\r\n    }\r\n  }\r\n\r\n  public static removeExtension(options?: Options) {\r\n    options.fileName = options.fileName.split(DOT)[0];\r\n  }\r\n}\r\n","import { FileUtil } from '../../file-util';\r\nimport { Mime } from '../../mime';\r\nimport { Exporter } from './exporter';\r\n\r\nexport abstract class FileExporter<T> implements Exporter<T> {\r\n  constructor() {}\r\n\r\n  public export(rows: Array<any>, options?: T) {\r\n    if (!rows) {\r\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\r\n    }\r\n    const content = this.createContent(rows, options);\r\n    const mimeType = this.getMimeType();\r\n    FileUtil.save(content, mimeType, options);\r\n  }\r\n\r\n  public abstract createContent(rows: Array<any>, options?: T): any;\r\n  public abstract getMimeType(): Mime;\r\n}\r\n","import * as XLSX from 'xlsx/dist/xlsx.mini.min';\r\nimport { Mime } from '../../mime';\r\nimport { FileExporter } from './file-exporter';\r\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\r\nexport abstract class WorksheetExporter<T> extends FileExporter<T> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: Array<any>, options?: T): any {\r\n    const workSheet: XLSX.WorkSheet =  XLSX.utils.json_to_sheet(rows, {\r\n      skipHeader: true // we don't want to see object properties as our headers\r\n    });\r\n    return this.workSheetToContent(workSheet, options);\r\n  }\r\n  public abstract workSheetToContent(workSheet: XLSX.WorkSheet, options?: T): any;\r\n  public abstract getMimeType(): Mime;\r\n\r\n}\r\n","import { COMMA, MIME_CSV, BOM } from './../../constants';\r\nimport { TxtOptions } from '../../options';\r\nimport { Injectable } from '@angular/core';\r\nimport * as XLSX from 'xlsx/dist/xlsx.mini.min';\r\nimport { WorksheetExporter } from './worksheet-exporter';\r\nimport { Mime } from '../../mime';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CsvExporterService extends WorksheetExporter<TxtOptions> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options?: TxtOptions): any {\r\n    return BOM + XLSX.utils.sheet_to_csv(worksheet, { FS: options?.delimiter ?? COMMA });\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_CSV;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Mime } from '../../mime';\r\nimport { TxtOptions } from '../../options';\r\nimport { MIME_TXT, RETURN, TAB } from './../../constants';\r\nimport { FileExporter } from './file-exporter';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TxtExporterService extends FileExporter<TxtOptions> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: any[], options?: TxtOptions) {\r\n    let content = '';\r\n    rows.forEach(element => {\r\n      content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\r\n    });\r\n    return content;\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_TXT;\r\n  }\r\n\r\n  private getDelimiter(options?: TxtOptions) {\r\n    if (options && options.delimiter) {\r\n      return options.delimiter;\r\n    } else {\r\n      return TAB;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as XLSX from 'xlsx/dist/xlsx.mini.min';\r\nimport { MIME_EXCEL_XLS, TYPE_ARRAY, XLSX_COLS } from '../../constants';\r\nimport { Mime } from '../../mime';\r\nimport { ExcelOptions } from '../../options';\r\nimport { WorksheetExporter } from './worksheet-exporter';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XlsExporterService extends WorksheetExporter<ExcelOptions> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options: ExcelOptions = {} as ExcelOptions): any {\r\n    const workBook = XLSX.utils.book_new();\r\n    if (options.columnWidths) {\r\n      worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\r\n    }\r\n    this.correctTypes(options);\r\n    XLSX.utils.book_append_sheet(workBook, worksheet, options.sheet);\r\n    return XLSX.write(workBook, options);\r\n  }\r\n\r\n  public getMimeType(): Mime {\r\n    return MIME_EXCEL_XLS;\r\n  }\r\n\r\n  private correctTypes(options: ExcelOptions) {\r\n    if (!options.type) {\r\n      options.type = TYPE_ARRAY;\r\n    }\r\n    (options as any).bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\r\n  }\r\n\r\n  private convertToWch(columnWidths: Array<number>): Array<{wch: number}> {\r\n    return columnWidths.map(width => ({wch: width}));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Options } from '../../options';\r\nimport { FileExporter } from './file-exporter';\r\nimport { Mime } from '../../mime';\r\nimport { MIME_JSON } from '../../constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JsonExporterService extends FileExporter<Options> {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createContent(rows: any[], options?: Options) {\r\n    return JSON.stringify(rows);\r\n  }\r\n   public getMimeType(): Mime {\r\n    return MIME_JSON;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { XlsExporterService } from './xls-exporter.service';\r\nimport { Mime } from '../../mime';\r\nimport { MIME_EXCEL_XLSX } from '../../constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XlsxExporterService extends XlsExporterService {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  // override\r\n  public getMimeType(): Mime {\r\n    return MIME_EXCEL_XLSX;\r\n  }\r\n}\r\n","import { CsvExporterService } from './exporters/csv-exporter.service';\r\nimport { TxtExporterService } from './exporters/txt-exporter.service';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Options } from '../options';\r\nimport { ExportType } from './../export-type';\r\nimport { Exporter } from './exporters/exporter';\r\nimport { XlsExporterService } from './exporters/xls-exporter.service';\r\nimport { JsonExporterService } from './exporters/json-exporter.service';\r\nimport { XlsxExporterService } from './exporters/xlsx-exporter.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ServiceLocatorService {\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  public getService(exportType: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other'): Exporter<Options> {\r\n    switch (exportType) {\r\n      case ExportType.XLS.valueOf():\r\n        return this.injector.get<XlsExporterService>(XlsExporterService);\r\n      case ExportType.XLSX.valueOf():\r\n          return this.injector.get<XlsxExporterService>(XlsxExporterService);\r\n      case ExportType.JSON.valueOf():\r\n        return this.injector.get<JsonExporterService>(JsonExporterService);\r\n      case ExportType.TXT.valueOf():\r\n        return this.injector.get<TxtExporterService>(TxtExporterService);\r\n      case ExportType.CSV.valueOf():\r\n        return this.injector.get<CsvExporterService>(CsvExporterService);\r\n      case ExportType.OTHER.valueOf():\r\n        return null;\r\n      default:\r\n        return this.injector.get<XlsxExporterService>(XlsxExporterService);\r\n    }\r\n  }\r\n}\r\n","import { DataRowOutlet } from '@angular/cdk/table';\r\nimport { Directive, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ExportType } from './export-type';\r\nimport { ExcelOptions, Options, TxtOptions } from './options';\r\nimport { DataExtractorService } from './services/data-extractor.service';\r\nimport { Exporter } from './services/exporters/exporter';\r\nimport { ServiceLocatorService } from './services/service-locator.service';\r\n\r\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\n@Directive()\r\nexport abstract class CdkTableExporter {\r\n\r\n  private _exporterService: Exporter<Options>;\r\n\r\n  @Input() hiddenColumns?: Array<number>;\r\n  @Input() exporter?: Exporter<Options>;\r\n  @Output() exportCompleted = new EventEmitter<void>();\r\n  @Output() exportStarted = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Data array which is extracted from nativeTable\r\n   */\r\n  private _data: Array<any>;\r\n\r\n  private _isIterating: boolean;\r\n\r\n  private _initialPageIndex: number;\r\n\r\n  private _isExporting: boolean;\r\n\r\n  private _subscription: Subscription;\r\n\r\n  private _options?: Options;\r\n\r\n  private _selectedRows?: Array<number>;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    private serviceLocator: ServiceLocatorService,\r\n    private dataExtractor: DataExtractorService,\r\n    protected _cdkTable: any\r\n  ) {}\r\n\r\n  /**\r\n   * Must return the number of pages of the table\r\n   */\r\n  public abstract getPageCount(): number;\r\n\r\n  /**\r\n   * Must return the number of items to display on a page\r\n   */\r\n  public abstract getPageSize(): number;\r\n\r\n  /**\r\n   * Must return the index of the current page that's displayed\r\n   */\r\n  public abstract getCurrentPageIndex(): number;\r\n\r\n  /**\r\n   * Must return the total number of items in the table\r\n   */\r\n  public abstract getTotalItemsCount(): number;\r\n\r\n  /**\r\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\r\n   * @param index page index\r\n   */\r\n  public abstract goToPage(index: number): void;\r\n\r\n  /**\r\n   * Must return an observable that notifies the subscribers about page changes\r\n   */\r\n  public abstract getPageChangeObservable(): Observable<any>;\r\n\r\n  /**\r\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n   */\r\n  exportTable(exportType?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options | ExcelOptions | TxtOptions) {\r\n    this.loadExporter(exportType);\r\n    this._options = options;\r\n    this.exportStarted.emit();\r\n    this._isIterating = true;\r\n    this._isExporting = true;\r\n    this._data = new Array<any>();\r\n    this.extractTableHeader();\r\n    try {\r\n      this.exportWithPagination();\r\n    } catch (notPaginated) {\r\n      this.exportSinglePage();\r\n    }\r\n  }\r\n\r\n  toggleRow(index: number): void {\r\n    const paginatedRowIndex: number = this.getPaginatedRowIndex(index);\r\n    if (this.isToggleOn(paginatedRowIndex)) {\r\n      this.toggleOff(paginatedRowIndex);\r\n    } else {\r\n      this.toggleOn(paginatedRowIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This event will clear rows selection done using toggleRow functionality\r\n   */\r\n  resetToggleRows() {\r\n    this._selectedRows = [];\r\n  }\r\n\r\n  private toggleOn(index: number) {\r\n    this._selectedRows = [...(this._selectedRows || []), index];\r\n  }\r\n\r\n  private toggleOff(index: number) {\r\n    this._selectedRows =  this._selectedRows.filter(x => x !== index);\r\n  }\r\n\r\n  private isToggleOn(index: number): boolean {\r\n    return this._selectedRows?.includes(index);\r\n  }\r\n\r\n\r\n  private loadExporter(exportType: any) {\r\n    if (exportType === ExportType.OTHER.valueOf()) {\r\n      this._exporterService = this.exporter;\r\n    } else {\r\n      this._exporterService = this.serviceLocator.getService(exportType);\r\n    }\r\n  }\r\n\r\n  private exportWithPagination() {\r\n    this._initialPageIndex = this.getCurrentPageIndex();\r\n    this.initPageHandler();\r\n    this.goToPage(0);\r\n  }\r\n\r\n  private exportSinglePage() {\r\n    this.extractDataOnCurrentPage();\r\n    this.extractTableFooter();\r\n    this.exportExtractedData();\r\n  }\r\n\r\n  private extractDataOnCurrentPage() {\r\n    const rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\r\n    this._data = this._data.concat(this.getSelectedRows(rows));\r\n  }\r\n\r\n  private getSelectedRows(rows: Array<any>) {\r\n    if (this.isSelectiveExport()) {\r\n      return rows.filter((_, i) => this._selectedRows.includes(this.getPaginatedRowIndex(i)));\r\n    } else {\r\n      return rows;\r\n    }\r\n  }\r\n\r\n  private isSelectiveExport(): boolean {\r\n    return this._selectedRows && !this.isMasterToggleOff() &&  !this.isMasterToggleOn();\r\n  }\r\n\r\n  private isMasterToggleOn(): boolean {\r\n    return this.compareSelectedRowCount(this.getTotalItemsCount());\r\n  }\r\n\r\n  private isMasterToggleOff(): boolean {\r\n    return this.compareSelectedRowCount(0);\r\n  }\r\n\r\n  private compareSelectedRowCount(rowCount: number): boolean {\r\n    return !!(this._selectedRows?.length === rowCount);\r\n  }\r\n\r\n  private initPageHandler(): void {\r\n    if (!this._subscription) {\r\n      this._subscription = this.getPageChangeObservable().subscribe(() => {\r\n        setTimeout(() => {\r\n          if (this._isIterating) {\r\n            this.extractDataOnCurrentPage();\r\n            if (this.hasNextPage()) {\r\n              this.nextPage();\r\n            } else {\r\n              this._isIterating = false;\r\n              this.goToPage(this._initialPageIndex);\r\n            }\r\n          } else if (this._isExporting) {\r\n            this._isExporting = false;\r\n            this.extractTableFooter();\r\n            this.exportExtractedData();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private exportExtractedData() {\r\n    this._exporterService.export(this._data, this._options);\r\n    this._data = new Array<any>();\r\n    this.exportCompleted.emit();\r\n  }\r\n\r\n  private extractSpecialRows(outlet: DataRowOutlet) {\r\n    this._data.push(...this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet));\r\n  }\r\n\r\n  private extractTableHeader() {\r\n    this.extractSpecialRows(this._cdkTable._headerRowOutlet);\r\n  }\r\n\r\n  private extractTableFooter() {\r\n    this.extractSpecialRows(this._cdkTable._footerRowOutlet);\r\n  }\r\n\r\n  private hasNextPage(): boolean {\r\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private nextPage(): void {\r\n    this.goToPage(this.getCurrentPageIndex() + 1);\r\n  }\r\n\r\n  private getPaginatedRowIndex(index: number): number {\r\n    return index + (this.getPageSize() * this.getCurrentPageIndex());\r\n  }\r\n}\r\n"]}