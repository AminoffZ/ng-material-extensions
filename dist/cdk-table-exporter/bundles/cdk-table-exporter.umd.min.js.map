{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://cdk-table-exporter/lib/export-type.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.module.ts","ng://cdk-table-exporter/lib/mime.ts","ng://cdk-table-exporter/lib/constants.ts","ng://cdk-table-exporter/lib/file-util.ts","ng://cdk-table-exporter/lib/services/data-extractor.service.ts","ng://cdk-table-exporter/lib/services/exporters/file-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/worksheet-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/csv-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/txt-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xls-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/json-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xlsx-exporter.service.ts","ng://cdk-table-exporter/lib/services/service-locator.service.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ExportType","CdkTableExporterModule","imports","CdkTableModule","extension","contentTypeHeader","CONTENT_TYPE_TEXT","TXT","EXTENSION_XLS","XLS","EXTENSION_XLSX","XLSX","EXTENSION_CSV","CSV","EXTENSION_JSON","JSON","EXTENSION_TEXT","MIME_EXCEL_XLS","Mime","CONTENT_TYPE_EXCEL","MIME_EXCEL_XLSX","MIME_JSON","CHAR_SET_UTF","MIME_TXT","MIME_CSV","XLS_REGEX","DOT","FileUtil","save","content","mime","options","blob","Blob","type","fileName","FileSaver.saveAs","isXls","toLowerCase","match","identifyExportType","removeExtension","split","DataExtractorService","extractRows","cdkTable","hiddenColumns","getRowsAsJsonArray","_rowOutlet","extractRow","outlet","renderedRows","getRenderedRows","convertToJsonArray","_getRenderedRows","rows","result","i","length","row","convertRow","push","createExcelItem","cells","children","shouldHide","element","item","innerText","columnIndex","includes","assign","factory","Éµfac","providedIn","FileExporter","export","Error","createContent","mimeType","getMimeType","WorksheetExporter","_super","call","workSheet","XLSX.utils","json_to_sheet","skipHeader","workSheetToContent","CsvExporterService","worksheet","sheet_to_csv","TxtExporterService","_this","forEach","values","join","getDelimiter","delimiter","XlsExporterService","workBook","book_new","columnWidths","convertToWch","correctTypes","book_append_sheet","sheet","XLSX.write","bookType","replace","map","width","wch","JsonExporterService","stringify","XlsxExporterService","ServiceLocatorService","injector","getService","exportType","valueOf","get","OTHER","core","Injector","CdkTableExporter","renderer","serviceLocator","dataExtractor","table","viewContainerRef","exportCompleted","EventEmitter","exportStarted","initCdkTable","defineProperty","_cdkTable","value","console","warn","_exporterButton","setButtonListener","_fileName","_sheetName","_b","_a","componentView","component","listen","_elementRef","nativeElement","evt","exportTable","loadExporter","_options","emit","_isIterating","_isExporting","_data","enableExportButton","extractTableHeader","exportWithPagination","notPaginated","exportSinglePage","_exporterService","exporter","_initialPageIndex","getCurrentPageIndex","initPageHandler","goToPage","extractDataOnCurrentPage","extractTableFooter","exportExtractedData","concat","_subscription","getPageChangeObservable","subscribe","setTimeout","hasNextPage","nextPage","extractSpecialRow","_headerRowOutlet","_footerRowOutlet","getPageCount","setProperty","inputs","exporterButton","sheetName","outputs","CONTENT_TYPE_APPLICATION"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum ExportType {\n  XLS = 'xls',\n  XLSX = 'xlsx',\n  CSV = 'csv',\n  TXT = 'txt',\n  JSON = 'json',\n  OTHER = 'other'\n}\n","import { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CdkTableModule\n  ],\n  exports: []\n})\nexport class CdkTableExporterModule { }\n","export class Mime {\n\n  extension: string;\n  contentTypeHeader: string;\n\n  constructor(extension: string, contentTypeHeader: string) {\n    this.extension = extension;\n    this.contentTypeHeader = contentTypeHeader;\n  }\n\n}\n","import { ExportType } from './export-type';\nimport { Mime } from './mime';\n\nexport const MAT_TABLE_EXPORTER = 'mat-table-exporter';\nexport const TYPE_ARRAY = 'array';\nexport const CHAR_SET_UTF = ';charset=utf-';\nexport const CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\nexport const CONTENT_TYPE_TEXT = ExportType.TXT + '/';\nexport const CONTENT_TYPE_APPLICATION = 'application/';\nexport const CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\nexport const DOT = '.';\nexport const EXTENSION_XLS = DOT + ExportType.XLS;\nexport const EXTENSION_XLSX =  DOT + ExportType.XLSX;\nexport const EXTENSION_CSV =  DOT + ExportType.CSV;\nexport const EXTENSION_JSON =  DOT + ExportType.JSON;\nexport const EXTENSION_TEXT =  DOT + ExportType.TXT;\nexport const MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nexport const MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nexport const MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\nexport const MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\nexport const MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\nexport const REF = '!ref';\nexport const XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\nexport const RETURN = '\\n';\nexport const TAB = '\\t';\nexport const XLSX_COLS = '!cols';\n","import { ExportType } from './export-type';\nimport * as FileSaver from 'file-saver';\nimport { MAT_TABLE_EXPORTER, DOT, XLS_REGEX } from './constants';\nimport { Mime } from './mime';\nimport { Options } from './options';\n\nexport class FileUtil {\n  public static save(content: string, mime: Mime, options?: Options) {\n    const blob = new Blob([content], {type: mime.contentTypeHeader});\n    let fileName = MAT_TABLE_EXPORTER;\n    if (options && options.fileName) {\n      fileName = options.fileName;\n    }\n    FileSaver.saveAs(blob, fileName + mime.extension);\n  }\n\n  public static isXls(fileName: string): boolean {\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\n  }\n\n  public static identifyExportType(fileName?: string) {\n    if (fileName && FileUtil.isXls(fileName)) {\n      return ExportType.XLS;\n    } else {\n      return ExportType.XLSX;\n    }\n  }\n\n  public static removeExtension(options?: Options) {\n    options.fileName = options.fileName.split(DOT)[0];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataRowOutlet } from '@angular/cdk/table';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataExtractorService {\n\n  constructor() { }\n\n  public extractRows(cdkTable: any, hiddenColumns: Array<any>): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, cdkTable._rowOutlet);\n  }\n\n  public extractRow(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet)[0];\n  }\n\n  private getRowsAsJsonArray(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    const renderedRows = this.getRenderedRows(cdkTable, outlet);\n    return this.convertToJsonArray(hiddenColumns, renderedRows);\n  }\n\n  private getRenderedRows(cdkTable: any, outlet: DataRowOutlet): HTMLTableRowElement[] {\n    return cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\n  }\n\n  private convertToJsonArray(hiddenColumns: Array<any>, rows: HTMLTableRowElement[]): Array<any> {\n    const result = new Array<any>();\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < rows.length; i++) {\n      const row: Array<string> = this.convertRow(hiddenColumns, rows[i]);\n      result.push(this.createExcelItem(row));\n    }\n    return result;\n  }\n\n  private convertRow(hiddenColumns: Array<any>, row: HTMLTableRowElement): Array<string> {\n    const result = new Array<string>();\n    const cells: any = row.children;\n    for (let i = 0; i < cells.length; i++) {\n      if (!this.shouldHide(hiddenColumns, i)) {\n        const element = cells.item(i).innerText;\n        result.push(element);\n      }\n    }\n    return result;\n  }\n\n  private shouldHide(hiddenColumns: Array<any>, columnIndex: number) {\n    if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private createExcelItem(row: Array<string>): any {\n    return Object.assign({}, row);\n  }\n}\n","import { FileUtil } from '../../file-util';\nimport { Mime } from '../../mime';\nimport { Exporter } from './exporter';\n\nexport abstract class FileExporter<T> implements Exporter<T> {\n  constructor() {}\n\n  public export(rows: Array<any>, options?: T) {\n    if (!rows) {\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\n    }\n    const content = this.createContent(rows, options);\n    const mimeType = this.getMimeType();\n    FileUtil.save(content, mimeType, options);\n  }\n\n  public abstract createContent(rows: Array<any>, options?: T): any;\n  public abstract getMimeType(): Mime;\n}\n","import * as XLSX from 'xlsx';\nimport { Mime } from '../../mime';\nimport { FileExporter } from './file-exporter';\n/**\n * An angular service class that is used to create files out of json object arrays.\n */\nexport abstract class WorksheetExporter<T> extends FileExporter<T> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(rows: Array<any>, options?: T): any {\n    const workSheet: XLSX.WorkSheet =  XLSX.utils.json_to_sheet(rows, {\n      skipHeader: true // we don't want to see object properties as our headers\n    });\n    return this.workSheetToContent(workSheet, options);\n  }\n  public abstract workSheetToContent(workSheet: XLSX.WorkSheet, options?: T): any;\n  public abstract getMimeType(): Mime;\n\n}\n","import { MIME_CSV } from './../../constants';\nimport { Options } from '../../options';\nimport { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { WorksheetExporter } from './worksheet-exporter';\nimport { Mime } from '../../mime';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsvExporterService extends WorksheetExporter<Options> {\n\n  constructor() {\n    super();\n  }\n\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options?: Options): any {\n    return XLSX.utils.sheet_to_csv(worksheet);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_CSV;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Mime } from '../../mime';\nimport { TxtOptions } from '../../options';\nimport { MIME_TXT, RETURN, TAB } from './../../constants';\nimport { FileExporter } from './file-exporter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TxtExporterService extends FileExporter<TxtOptions> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(rows: any[], options?: TxtOptions) {\n    let content = '';\n    rows.forEach(element => {\n      content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\n    });\n    return content;\n  }\n\n  public getMimeType(): Mime {\n    return MIME_TXT;\n  }\n\n  private getDelimiter(options?: TxtOptions) {\n    if (options && options.delimiter) {\n      return options.delimiter;\n    } else {\n      return TAB;\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { MIME_EXCEL_XLS, TYPE_ARRAY, XLSX_COLS } from '../../constants';\nimport { Mime } from '../../mime';\nimport { ExcelOptions } from '../../options';\nimport { WorksheetExporter } from './worksheet-exporter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsExporterService extends WorksheetExporter<ExcelOptions> {\n\n  constructor() {\n    super();\n  }\n\n  public workSheetToContent(worksheet: XLSX.WorkSheet, options: ExcelOptions = {} as ExcelOptions): any {\n    const workBook = XLSX.utils.book_new();\n    if (options.columnWidths) {\n      worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\n    }\n    this.correctTypes(options);\n    XLSX.utils.book_append_sheet(workBook, worksheet, options.sheet);\n    return XLSX.write(workBook, options);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLS;\n  }\n\n  private correctTypes(options: ExcelOptions) {\n    if (!options.type) {\n      options.type = TYPE_ARRAY;\n    }\n    (options as any).bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\n  }\n\n  private convertToWch(columnWidths: Array<number>): Array<{wch: number}> {\n    return columnWidths.map(width => ({wch: width}));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Options } from '../../options';\nimport { FileExporter } from './file-exporter';\nimport { Mime } from '../../mime';\nimport { MIME_JSON } from '../../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonExporterService extends FileExporter<Options> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(rows: any[], options?: Options) {\n    return JSON.stringify(rows);\n  }\n   public getMimeType(): Mime {\n    return MIME_JSON;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { XlsExporterService } from './xls-exporter.service';\nimport { Mime } from '../../mime';\nimport { MIME_EXCEL_XLSX } from '../../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsxExporterService extends XlsExporterService {\n\n  constructor() {\n    super();\n  }\n\n  // override\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLSX;\n  }\n}\n","import { CsvExporterService } from './exporters/csv-exporter.service';\nimport { TxtExporterService } from './exporters/txt-exporter.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { Options } from '../options';\nimport { ExportType } from './../export-type';\nimport { Exporter } from './exporters/exporter';\nimport { XlsExporterService } from './exporters/xls-exporter.service';\nimport { JsonExporterService } from './exporters/json-exporter.service';\nimport { XlsxExporterService } from './exporters/xlsx-exporter.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLocatorService {\n\n  constructor(private injector: Injector) { }\n\n  public getService(exportType: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other'): Exporter<Options> {\n    switch (exportType) {\n      case ExportType.XLS.valueOf():\n        return this.injector.get<XlsExporterService>(XlsExporterService);\n      case ExportType.XLSX.valueOf():\n          return this.injector.get<XlsxExporterService>(XlsxExporterService);\n      case ExportType.JSON.valueOf():\n        return this.injector.get<JsonExporterService>(JsonExporterService);\n      case ExportType.TXT.valueOf():\n        return this.injector.get<TxtExporterService>(TxtExporterService);\n      case ExportType.CSV.valueOf():\n        return this.injector.get<CsvExporterService>(CsvExporterService);\n      case ExportType.OTHER.valueOf():\n        return null;\n      default:\n        return this.injector.get<XlsxExporterService>(XlsxExporterService);\n    }\n  }\n}\n","import { DataRowOutlet } from '@angular/cdk/table';\nimport { EventEmitter, Input, Output, Renderer2, ViewContainerRef, Directive } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { ExportType } from './export-type';\nimport { FileUtil } from './file-util';\nimport { ExcelOptions, Options, TxtOptions } from './options';\nimport { DataExtractorService } from './services/data-extractor.service';\nimport { Exporter } from './services/exporters/exporter';\nimport { ServiceLocatorService } from './services/service-locator.service';\n\n/**\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\n */\n@Directive()\nexport abstract class CdkTableExporter {\n\n  private _exporterService: Exporter<Options>;\n\n  @Input() hiddenColumns?: Array<number>;\n  @Input() exporter?: Exporter<Options>;\n  @Output() exportCompleted = new EventEmitter<void>();\n  @Output() exportStarted = new EventEmitter<void>();\n\n  private _cdkTable: any;\n\n  get cdkTable(): any {\n    return this._cdkTable;\n  }\n\n  /**\n   * @deprecated\n   */\n  @Input()\n  set cdkTable(value: any) {\n    console.warn('cdkTable input is deprecated!');\n    this._cdkTable = value;\n  }\n\n  private _exporterButton: any;\n\n  get exporterButton(): any {\n    return this._exporterButton;\n  }\n\n  /**\n   * @deprecated\n   */\n  @Input()\n  set exporterButton(value: any) {\n    console.warn('exporterButton input is deprecated!');\n    this._exporterButton = value;\n    this.setButtonListener();\n  }\n\n  private _fileName: string;\n\n  get fileName(): string {\n    return this._fileName;\n  }\n\n  /**\n   * @deprecated\n   */\n  @Input()\n  set fileName(value: string) {\n    console.warn('fileName input is deprecated!');\n    this._fileName = value;\n  }\n\n  private _sheetName: string;\n\n  get sheetName(): string {\n    return this._sheetName;\n  }\n\n  /**\n   * @deprecated\n   */\n  @Input()\n  set sheetName(value: string) {\n    console.warn('sheetName input is deprecated!');\n    this._sheetName = value;\n  }\n\n\n  /**\n   * Data array which is extracted from nativeTable\n   */\n  private _data: Array<any>;\n\n  private _isIterating: boolean;\n\n  private _initialPageIndex: number;\n\n  private _isExporting: boolean;\n\n  private _subscription: Subscription;\n\n  private _options?: Options;\n\n  constructor(\n    protected renderer: Renderer2,\n    private serviceLocator: ServiceLocatorService,\n    private dataExtractor: DataExtractorService,\n    protected table: any,\n    protected viewContainerRef: ViewContainerRef,\n  ) {\n    this.initCdkTable();\n  }\n\n  /**\n   * Must return the number of pages of the table\n   */\n  public abstract getPageCount(): number;\n\n  /**\n   * Must return the index of the current page that's displayed\n   */\n  public abstract getCurrentPageIndex(): number;\n\n  /**\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\n   * @param index page index\n   */\n  public abstract goToPage(index: number): void;\n\n  /**\n   * Must return an observable that notifies the subscribers about page changes\n   */\n  public abstract getPageChangeObservable(): Observable<any>;\n\n  private initCdkTable() {\n    // tslint:disable-next-line:no-string-literal\n    const table = this.viewContainerRef['_data']?.componentView?.component;\n    if (table) {\n      this._cdkTable = table;\n    } else if (this.table) {\n      this._cdkTable = this.table;\n    } else {\n      throw new Error('Unsupported Angular version');\n    }\n  }\n\n  private setButtonListener() {\n    if (this._exporterButton) {\n      this.renderer.listen(this._exporterButton._elementRef.nativeElement, 'click', (evt) => {\n        const options = { fileName: this._fileName, sheet: this._sheetName } as ExcelOptions;\n        this.exportTable(FileUtil.identifyExportType(this._fileName), options); // this is to support deprecated way of exporting\n      });\n    }\n  }\n\n  /**\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\n   */\n  exportTable(exportType?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: ExcelOptions | TxtOptions | Options) {\n    this.loadExporter(exportType);\n    this._options = options;\n    this.exportStarted.emit();\n    this._isIterating = true;\n    this._isExporting = true;\n    this._data = new Array<any>();\n    this.enableExportButton(false);\n    this.extractTableHeader();\n    try {\n      this.exportWithPagination();\n    } catch (notPaginated) {\n      this.exportSinglePage();\n    }\n  }\n\n  private loadExporter(exportType: any) {\n    if (exportType === ExportType.OTHER.valueOf()) {\n      this._exporterService = this.exporter;\n    } else {\n      this._exporterService = this.serviceLocator.getService(exportType);\n    }\n  }\n\n  private exportWithPagination() {\n    this._initialPageIndex = this.getCurrentPageIndex();\n    this.initPageHandler();\n    this.goToPage(0);\n  }\n\n  private exportSinglePage() {\n    this.extractDataOnCurrentPage();\n    this.extractTableFooter();\n    this.exportExtractedData();\n  }\n\n  private extractDataOnCurrentPage() {\n    this._data = this._data.concat(this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns));\n  }\n\n  private initPageHandler(): void {\n    if (!this._subscription) {\n      this._subscription = this.getPageChangeObservable().subscribe(() => {\n        setTimeout(() => {\n          if (this._isIterating) {\n            this.extractDataOnCurrentPage();\n            if (this.hasNextPage()) {\n              this.nextPage();\n            } else {\n              this._isIterating = false;\n              this.goToPage(this._initialPageIndex);\n            }\n          } else if (this._isExporting) {\n            this._isExporting = false;\n            this.extractTableFooter();\n            this.exportExtractedData();\n          }\n        });\n      });\n    }\n  }\n\n  private exportExtractedData() {\n    this._exporterService.export(this._data, this._options);\n    this._data = new Array<any>();\n    this.enableExportButton(true);\n    this.exportCompleted.emit();\n  }\n\n  private extractSpecialRow(outlet: DataRowOutlet) {\n    const row = this.dataExtractor.extractRow(this._cdkTable, this.hiddenColumns, outlet);\n    if (row) {\n      this._data.push(row);\n    }\n  }\n\n  private extractTableHeader() {\n    this.extractSpecialRow(this._cdkTable._headerRowOutlet);\n  }\n\n  private extractTableFooter() {\n    this.extractSpecialRow(this._cdkTable._footerRowOutlet);\n  }\n\n  public hasNextPage(): boolean {\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public nextPage(): void {\n    this.goToPage(this.getCurrentPageIndex() + 1);\n  }\n\n  private enableExportButton(value: boolean) {\n    if (this._exporterButton) {\n      this.renderer.setProperty(this._exporterButton._elementRef.nativeElement, 'disabled', value ? null : 'true');\n    }\n  }\n}\n\n"]}