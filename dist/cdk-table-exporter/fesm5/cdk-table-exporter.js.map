{"version":3,"file":"cdk-table-exporter.js","sources":["ng://cdk-table-exporter/lib/cdk-table-exporter.module.ts","ng://cdk-table-exporter/lib/export-type.ts","ng://cdk-table-exporter/lib/mime.ts","ng://cdk-table-exporter/lib/constants.ts","ng://cdk-table-exporter/lib/file-util.ts","ng://cdk-table-exporter/lib/cdk-table-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/json-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/worksheet-exporter.ts","ng://cdk-table-exporter/lib/services/exporters/txt-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xls-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/xlsx-exporter.service.ts","ng://cdk-table-exporter/lib/services/exporters/csv-exporter.service.ts","ng://cdk-table-exporter/lib/services/service-locator.service.ts","ng://cdk-table-exporter/lib/services/data-extractor.service.ts"],"sourcesContent":["import { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CdkTableModule\n  ],\n  exports: []\n})\nexport class CdkTableExporterModule { }\n","export enum ExportType {\r\n  XLS = 'xls',\r\n  XLSX = 'xlsx',\r\n  CSV = 'csv',\r\n  TXT = 'txt',\r\n  JSON = 'json',\r\n  OTHER = 'other'\r\n}\r\n","export class Mime {\r\n\r\n  extension: string;\r\n  contentTypeHeader: string;\r\n\r\n  constructor(extension: string, contentTypeHeader: string) {\r\n    this.extension = extension;\r\n    this.contentTypeHeader = contentTypeHeader;\r\n  }\r\n\r\n}\r\n","import { ExportType } from './export-type';\r\nimport { Mime } from './mime';\r\n\r\nexport const MAT_TABLE_EXPORTER = 'mat-table-exporter';\r\nexport const TYPE_ARRAY = 'array';\r\nexport const CHAR_SET_UTF = ';charset=utf-';\r\nexport const CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\r\nexport const CHAR_SET_UTF_16 = CHAR_SET_UTF + '16';\r\nexport const CONTENT_TYPE_TEXT = ExportType.TXT + '/';\r\nexport const CONTENT_TYPE_APPLICATION = 'application/';\r\nexport const CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\r\nexport const P = '.';\r\nexport const EXTENSION_XLS = P + ExportType.XLS;\r\nexport const EXTENSION_XLSX =  P + ExportType.XLSX;\r\nexport const EXTENSION_CSV =  P + ExportType.CSV;\r\nexport const EXTENSION_JSON =  P + ExportType.JSON;\r\nexport const EXTENSION_TEXT =  P + ExportType.TXT;\r\nexport const MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nexport const MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\r\nexport const MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_16);\r\nexport const MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\r\nexport const REF = '!ref';\r\nexport const XLS_REGEX = P + '*\\.' + ExportType.XLS + '$';\r\n\r\n","import { ExportType } from './export-type';\r\nimport * as FileSaver from 'file-saver';\r\nimport { MAT_TABLE_EXPORTER, P, XLS_REGEX } from './constants';\r\nimport { Mime } from './mime';\r\nimport { Options } from './options';\r\n\r\nexport class FileUtil {\r\n  public static save(content: string, mime: Mime, options?: Options) {\r\n    const blob = new Blob([content], {type: mime.contentTypeHeader});\r\n    let fileName = MAT_TABLE_EXPORTER;\r\n    if (options && options.fileName) {\r\n      fileName = options.fileName;\r\n    }\r\n    FileSaver.saveAs(blob, fileName + mime.extension);\r\n  }\r\n\r\n  public static isXls(fileName: string): boolean {\r\n    return fileName.toLowerCase().match(XLS_REGEX) != null;\r\n  }\r\n\r\n  public static identifyExportType(fileName?: string): ExportType {\r\n    if (fileName && FileUtil.isXls(fileName)) {\r\n      return ExportType.XLS;\r\n    } else {\r\n      return ExportType.XLSX;\r\n    }\r\n  }\r\n\r\n  public static removeExtension(options?: Options) {\r\n    options.fileName = options.fileName.split(P)[0];\r\n  }\r\n}\r\n","import { DataRowOutlet } from '@angular/cdk/table';\r\nimport { EventEmitter, Input, Output, Renderer2, ViewContainerRef } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { ExportType } from './export-type';\r\nimport { FileUtil } from './file-util';\r\nimport { ExcelOptions, Options } from './options';\r\nimport { DataExtractorService } from './services/data-extractor.service';\r\nimport { Exporter } from './services/exporters/exporter';\r\nimport { ServiceLocatorService } from './services/service-locator.service';\r\n\r\n\r\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\n// @Directive()\r\nexport abstract class CdkTableExporter {\r\n\r\n\r\n  @Input() hiddenColumns?: Array<number>;\r\n  @Input() exporter?: Exporter<Options>;\r\n  @Output() exportCompleted ?= new EventEmitter<void>();\r\n  @Output() exportStarted ?= new EventEmitter<void>();\r\n\r\n  private _cdkTable: any;\r\n\r\n  get cdkTable(): any {\r\n    return this._cdkTable;\r\n  }\r\n\r\n/**\r\n * @deprecated\r\n */\r\n  @Input()\r\n  set cdkTable(value: any) {\r\n    console.warn('cdkTable input is deprecated!');\r\n    this._cdkTable = value;\r\n  }\r\n\r\n  private _exporterButton: any;\r\n\r\n  get exporterButton(): any {\r\n    return this._exporterButton;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   */\r\n  @Input()\r\n  set exporterButton(value: any) {\r\n    console.warn('exporterButton input is deprecated!');\r\n    this._exporterButton = value;\r\n    this.setButtonListener();\r\n  }\r\n\r\n  private _fileName: string;\r\n\r\n  get fileName(): string {\r\n    return this._fileName;\r\n  }\r\n\r\n/**\r\n * @deprecated\r\n */\r\n  @Input()\r\n  set fileName(value: string) {\r\n    console.warn('fileName input is deprecated!');\r\n    this._fileName = value;\r\n  }\r\n\r\n  private _sheetName: string;\r\n\r\n  get sheetName(): string {\r\n    return this._sheetName;\r\n  }\r\n\r\n/**\r\n * @deprecated\r\n */\r\n  @Input()\r\n  set sheetName(value: string) {\r\n    console.warn('sheetName input is deprecated!');\r\n    this._sheetName = value;\r\n  }\r\n\r\n\r\n  /**\r\n   * Data array which is extracted from nativeTable\r\n   */\r\n  private _data: Array<any>;\r\n\r\n  private _isIterating: boolean;\r\n\r\n  private _initialPageIndex: number;\r\n\r\n  private _isExporting: boolean;\r\n\r\n  private _subscription: Subscription;\r\n\r\n  private _options?: Options;\r\n\r\n  constructor(protected renderer: Renderer2,\r\n              private serviceLocator: ServiceLocatorService,\r\n              private dataExtractor: DataExtractorService,\r\n              protected table: any,\r\n              protected viewContainerRef: ViewContainerRef) {\r\n    this.initCdkTable();\r\n  }\r\n\r\n  /**\r\n   * Must return the number of pages of the table\r\n   */\r\n  public abstract getPageCount(): number;\r\n\r\n  /**\r\n   * Must return the index of the current page that's displayed\r\n   */\r\n  public abstract getCurrentPageIndex(): number;\r\n\r\n  /**\r\n   * When called, the CdkTable should render the rows inside the page whose index given as parameter\r\n   * @param index page index\r\n   */\r\n  public abstract goToPage(index: number): void;\r\n\r\n  /**\r\n   * Must return an observable that notifies the subscribers about page changes\r\n   */\r\n  public abstract getPageChangeObservable(): Observable<any>;\r\n\r\n  private initCdkTable() {\r\n    // tslint:disable-next-line:no-string-literal\r\n    const table = this.viewContainerRef['_data'].componentView.component;\r\n    if (table) {\r\n      this._cdkTable = table;\r\n    } else if (this.table) {\r\n      this._cdkTable = this.table;\r\n    } else {\r\n      throw new Error('Unsupported Angular version');\r\n    }\r\n  }\r\n\r\n  private initExporterService(exportType?: ExportType) {\r\n    if (exportType !== ExportType.OTHER) {\r\n      this.exporter = this.serviceLocator.getService(exportType);\r\n    }\r\n  }\r\n\r\n  private setButtonListener() {\r\n    if (this._exporterButton) {\r\n      this.renderer.listen(this._exporterButton._elementRef.nativeElement, 'click', (evt) => {\r\n        const options = {fileName: this._fileName, sheet: this._sheetName} as ExcelOptions;\r\n        this.exportTable(FileUtil.identifyExportType(this._fileName), options); // this is to support deprecated way of exporting\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n   */\r\n  exportTable(exportTypeParam?: ExportType | 'xls' | 'xlsx' | 'csv' | 'txt' | 'json' | 'other', options?: Options) {\r\n    const exportType: ExportType = this.correctExportType(exportTypeParam);\r\n    this.initExporterService(exportType);\r\n    this._options = options;\r\n    this.exportStarted.emit();\r\n    this._isIterating = true;\r\n    this._isExporting = true;\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(false);\r\n    this.extractTableHeader();\r\n    try {\r\n      this.exportWithPagination();\r\n    } catch (notPaginated) {\r\n      this.exportSinglePage();\r\n    }\r\n  }\r\n  private correctExportType(exportTypeParam?: any): ExportType {\r\n    if (exportTypeParam && typeof exportTypeParam === 'string') {\r\n      switch (exportTypeParam) {\r\n        case ExportType.CSV:\r\n            return ExportType.CSV;\r\n        case ExportType.JSON:\r\n            return ExportType.JSON;\r\n        case ExportType.OTHER:\r\n            return ExportType.OTHER;\r\n        case ExportType.TXT:\r\n            return ExportType.TXT;\r\n        case ExportType.XLS:\r\n            return ExportType.XLS;\r\n        case ExportType.XLSX:\r\n            return ExportType.XLSX;\r\n      }\r\n    } else {\r\n      return exportTypeParam as ExportType;\r\n    }\r\n  }\r\n\r\n  private exportWithPagination() {\r\n    this._initialPageIndex = this.getCurrentPageIndex();\r\n    this.initPageHandler();\r\n    this.goToPage(0);\r\n  }\r\n\r\n  private exportSinglePage() {\r\n    this.extractDataOnCurrentPage();\r\n    this.extractTableFooter();\r\n    this.exportExtractedData();\r\n  }\r\n\r\n  private extractDataOnCurrentPage() {\r\n    this._data = this._data.concat(this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns));\r\n  }\r\n\r\n  private initPageHandler(): void {\r\n    if (!this._subscription) {\r\n      this._subscription = this.getPageChangeObservable().subscribe(() => {\r\n        setTimeout(() => {\r\n          if (this._isIterating) {\r\n            this.extractDataOnCurrentPage();\r\n            if (this.hasNextPage()) {\r\n              this.nextPage();\r\n            } else {\r\n              this._isIterating = false;\r\n              this.goToPage(this._initialPageIndex);\r\n            }\r\n          } else if (this._isExporting) {\r\n            this._isExporting = false;\r\n            this.extractTableFooter();\r\n            this.exportExtractedData();\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private exportExtractedData() {\r\n    this.exporter.export(this._data, this._options);\r\n    this._data = new Array<any>();\r\n    this.enableExportButton(true);\r\n    this.exportCompleted.emit();\r\n  }\r\n\r\n  private extractSpecialRow(outlet: DataRowOutlet) {\r\n    const row = this.dataExtractor.extractRow(this._cdkTable, this.hiddenColumns, outlet);\r\n    if (row) {\r\n      this._data.push(row);\r\n    }\r\n  }\r\n\r\n  private extractTableHeader() {\r\n    this.extractSpecialRow(this._cdkTable._headerRowOutlet);\r\n  }\r\n\r\n  private extractTableFooter() {\r\n    this.extractSpecialRow(this._cdkTable._footerRowOutlet);\r\n  }\r\n\r\n  public hasNextPage(): boolean {\r\n    if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public nextPage(): void {\r\n    this.goToPage(this.getCurrentPageIndex() + 1);\r\n  }\r\n\r\n  private enableExportButton(value: boolean) {\r\n    if (this._exporterButton) {\r\n      this.renderer.setProperty(this._exporterButton._elementRef.nativeElement, 'disabled', value ? null : 'true');\r\n    }\r\n  }\r\n}\r\n\r\n","import { MIME_JSON } from './../../constants';\nimport { Exporter } from './exporter';\nimport { Injectable } from '@angular/core';\nimport { Options } from '../../options';\nimport { FileUtil } from '../../file-util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JsonExporterService implements Exporter<Options> {\n\n  constructor() {\n  }\n\n  public export(rows: any[], options?: Options) {\n    const jsonContent = JSON.stringify(rows);\n    FileUtil.save(jsonContent, MIME_JSON, options);\n  }\n}\n","import * as XLSX from 'xlsx';\nimport { Options } from '../../options';\nimport { Exporter } from './exporter';\nimport { FileUtil } from '../../file-util';\nimport { Mime } from '../../mime';\n\n/**\n * An angular service class that is used to create files out of json object arrays.\n */\nexport abstract class WorksheetExporter<T extends Options> implements Exporter<T> {\n  constructor() {}\n\n  public export(rows: Array<any>, options?: T) {\n    if (!rows) {\n      throw new Error('Empty json array is provided, rows parameter is mandatory!');\n    }\n    const worksheet: XLSX.WorkSheet =  XLSX.utils.json_to_sheet(rows, {\n      skipHeader: true // we don't want to see object properties as our headers\n    });\n    this.writeToFile(worksheet, options);\n  }\n\n  public writeToFile(worksheet: XLSX.WorkSheet, options?: T) {\n    const content = this.createContent(worksheet, options);\n    const mimeType = this.getMimeType();\n    FileUtil.save(content, mimeType, options);\n  }\n\n  public abstract createContent(worksheet: XLSX.WorkSheet, options?: T): any;\n  public abstract getMimeType(): Mime;\n\n}\n","import { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { Options } from '../../options';\nimport { WorksheetExporter } from './worksheet-exporter';\nimport { MIME_TXT } from './../../constants';\nimport { Mime } from '../../mime';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TxtExporterService extends WorksheetExporter<Options>  {\n\n  constructor() {\n    super();\n   }\n\n  public createContent(worksheet: XLSX.WorkSheet, options?: Options): any {\n    return XLSX.utils.sheet_to_txt(worksheet);\n  }\n  public getMimeType(): Mime {\n    return MIME_TXT;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { MIME_EXCEL_XLS, TYPE_ARRAY } from '../../constants';\nimport { Mime } from '../../mime';\nimport { ExcelOptions } from '../../options';\nimport { WorksheetExporter } from './worksheet-exporter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsExporterService extends WorksheetExporter<ExcelOptions> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(worksheet: XLSX.WorkSheet, options?: ExcelOptions): any {\n    const workBook = XLSX.utils.book_new();\n    if (!options) {\n      options = {} as ExcelOptions;\n    }\n    this.correctType(options);\n    XLSX.utils.book_append_sheet(workBook, worksheet, options.sheet);\n    return XLSX.write(workBook, options);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLS;\n  }\n\n  private correctType(options: ExcelOptions) {\n    if (!options.type) {\n      options.type = TYPE_ARRAY;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { XlsExporterService } from './xls-exporter.service';\nimport { Mime } from '../../mime';\nimport { MIME_EXCEL_XLSX } from '../../constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class XlsxExporterService extends XlsExporterService {\n\n  constructor() {\n    super();\n  }\n\n  // override\n  public getMimeType(): Mime {\n    return MIME_EXCEL_XLSX;\n  }\n}\n","import { MIME_CSV } from './../../constants';\nimport { Options } from '../../options';\nimport { Injectable } from '@angular/core';\nimport * as XLSX from 'xlsx';\nimport { WorksheetExporter } from './worksheet-exporter';\nimport { Mime } from '../../mime';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsvExporterService extends WorksheetExporter<Options> {\n\n  constructor() {\n    super();\n  }\n\n  public createContent(worksheet: XLSX.WorkSheet, options?: Options): any {\n    return XLSX.utils.sheet_to_csv(worksheet);\n  }\n\n  public getMimeType(): Mime {\n    return MIME_CSV;\n  }\n}\n","import { CsvExporterService } from './exporters/csv-exporter.service';\nimport { TxtExporterService } from './exporters/txt-exporter.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { Options } from '../options';\nimport { ExportType } from './../export-type';\nimport { Exporter } from './exporters/exporter';\nimport { XlsExporterService } from './exporters/xls-exporter.service';\nimport { JsonExporterService } from './exporters/json-exporter.service';\nimport { XlsxExporterService } from './exporters/xlsx-exporter.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceLocatorService {\n\n  constructor(private injector: Injector) { }\n\n  public getService(exportType: ExportType): Exporter<Options> {\n    switch (exportType) {\n      case ExportType.XLS:\n        return this.injector.get<XlsExporterService>(XlsExporterService);\n      case ExportType.XLSX:\n          return this.injector.get<XlsxExporterService>(XlsxExporterService);\n      case ExportType.JSON:\n        return this.injector.get<JsonExporterService>(JsonExporterService);\n      case ExportType.TXT:\n        return this.injector.get<TxtExporterService>(TxtExporterService);\n      case ExportType.CSV:\n        return this.injector.get<CsvExporterService>(CsvExporterService);\n      default:\n        return this.injector.get<XlsxExporterService>(XlsxExporterService);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataRowOutlet } from '@angular/cdk/table';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataExtractorService {\n\n  constructor() { }\n\n  public extractRows(cdkTable: any, hiddenColumns: Array<any>): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, cdkTable._rowOutlet);\n  }\n\n  public extractRow(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet)[0];\n  }\n\n  private getRowsAsJsonArray(cdkTable: any, hiddenColumns: Array<any>, outlet: DataRowOutlet): Array<any> {\n    const renderedRows = this.getRenderedRows(cdkTable, outlet);\n    return this.convertToJsonArray(hiddenColumns, renderedRows);\n  }\n\n  private getRenderedRows(cdkTable: any, outlet: DataRowOutlet): HTMLTableRowElement[] {\n    return cdkTable._getRenderedRows(outlet) as HTMLTableRowElement[];\n  }\n\n  private convertToJsonArray(hiddenColumns: Array<any>, rows: HTMLTableRowElement[]): Array<any> {\n    const result = new Array<any>();\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < rows.length; i++) {\n      const row: Array<string> = this.convertRow(hiddenColumns, rows[i]);\n      result.push(this.createExcelItem(row));\n    }\n    return result;\n  }\n\n  private convertRow(hiddenColumns: Array<any>, row: HTMLTableRowElement): Array<string> {\n    const result = new Array<string>();\n    const cells: any = row.children;\n    for (let i = 0; i < cells.length; i++) {\n      if (!this.shouldHide(hiddenColumns, i)) {\n        const element = cells.item(i).innerText;\n        result.push(element);\n      }\n    }\n    return result;\n  }\n\n  private shouldHide(hiddenColumns: Array<any>, columnIndex: number) {\n    if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private createExcelItem(row: Array<string>): any {\n    return Object.assign({}, row);\n  }\n}\n"],"names":["FileSaver.saveAs","XLSX.utils","tslib_1.__extends","XLSX.write"],"mappings":"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"}