import { ExportType } from './export-type';
import * as FileSaver from 'file-saver';
import { MAT_TABLE_EXPORTER, DOT, XLS_REGEX } from './constants';
export class FileUtil {
    static save(content, mime, options) {
        const blob = new Blob([content], { type: mime.contentTypeHeader });
        let fileName = MAT_TABLE_EXPORTER;
        if (options && options.fileName) {
            fileName = options.fileName;
        }
        FileSaver.saveAs(blob, fileName + mime.extension);
    }
    static isXls(fileName) {
        return fileName.toLowerCase().match(XLS_REGEX) != null;
    }
    static identifyExportType(fileName) {
        if (fileName && FileUtil.isXls(fileName)) {
            return ExportType.XLS;
        }
        else {
            return ExportType.XLSX;
        }
    }
    static removeExtension(options) {
        options.fileName = options.fileName.split(DOT)[0];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2RrLXRhYmxlLWV4cG9ydGVyLyIsInNvdXJjZXMiOlsibGliL2ZpbGUtdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sS0FBSyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSWpFLE1BQU0sT0FBTyxRQUFRO0lBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFlLEVBQUUsSUFBVSxFQUFFLE9BQWlCO1FBQy9ELE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQztRQUNsQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQy9CLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1NBQzdCO1FBQ0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFnQjtRQUNsQyxPQUFPLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ3pELENBQUM7SUFFTSxNQUFNLENBQUMsa0JBQWtCLENBQUMsUUFBaUI7UUFDaEQsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4QyxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUM7U0FDdkI7YUFBTTtZQUNMLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQWlCO1FBQzdDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwb3J0VHlwZSB9IGZyb20gJy4vZXhwb3J0LXR5cGUnO1xuaW1wb3J0ICogYXMgRmlsZVNhdmVyIGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgTUFUX1RBQkxFX0VYUE9SVEVSLCBET1QsIFhMU19SRUdFWCB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IE1pbWUgfSBmcm9tICcuL21pbWUnO1xuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBGaWxlVXRpbCB7XG4gIHB1YmxpYyBzdGF0aWMgc2F2ZShjb250ZW50OiBzdHJpbmcsIG1pbWU6IE1pbWUsIG9wdGlvbnM/OiBPcHRpb25zKSB7XG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtjb250ZW50XSwge3R5cGU6IG1pbWUuY29udGVudFR5cGVIZWFkZXJ9KTtcbiAgICBsZXQgZmlsZU5hbWUgPSBNQVRfVEFCTEVfRVhQT1JURVI7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5maWxlTmFtZSkge1xuICAgICAgZmlsZU5hbWUgPSBvcHRpb25zLmZpbGVOYW1lO1xuICAgIH1cbiAgICBGaWxlU2F2ZXIuc2F2ZUFzKGJsb2IsIGZpbGVOYW1lICsgbWltZS5leHRlbnNpb24pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc1hscyhmaWxlTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpbGVOYW1lLnRvTG93ZXJDYXNlKCkubWF0Y2goWExTX1JFR0VYKSAhPSBudWxsO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpZGVudGlmeUV4cG9ydFR5cGUoZmlsZU5hbWU/OiBzdHJpbmcpIHtcbiAgICBpZiAoZmlsZU5hbWUgJiYgRmlsZVV0aWwuaXNYbHMoZmlsZU5hbWUpKSB7XG4gICAgICByZXR1cm4gRXhwb3J0VHlwZS5YTFM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBFeHBvcnRUeXBlLlhMU1g7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZW1vdmVFeHRlbnNpb24ob3B0aW9ucz86IE9wdGlvbnMpIHtcbiAgICBvcHRpb25zLmZpbGVOYW1lID0gb3B0aW9ucy5maWxlTmFtZS5zcGxpdChET1QpWzBdO1xuICB9XG59XG4iXX0=