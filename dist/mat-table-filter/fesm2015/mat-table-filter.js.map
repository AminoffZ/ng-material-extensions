{"version":3,"file":"mat-table-filter.js","sources":["ng://mat-table-filter/lib/mat-table-filter.enum.ts","ng://mat-table-filter/lib/services/filter-predicate.ts","ng://mat-table-filter/lib/services/array-predicate.service.ts","ng://mat-table-filter/lib/services/alpha-numeric-predicate.service.ts","ng://mat-table-filter/lib/services/mat-table-filter.service.ts","ng://mat-table-filter/lib/mat-table-filter.directive.ts","ng://mat-table-filter/lib/mat-table-filter.module.ts","ng://mat-table-filter/public-api.ts","ng://mat-table-filter/mat-table-filter.ts"],"sourcesContent":["export enum MatTableFilter {\n  EQUALS = 'EQUALS',\n  ANYWHERE = 'ANYWHERE',\n  STARTS_WITH = 'STARTS_WITH',\n  ENDS_WITH = 'ENDS_WITH'\n}\n","import { MatTableFilter } from '../mat-table-filter.enum';\nimport { ItemPair } from '../item-pair';\nimport * as LODASH from 'lodash';\nimport { Options } from '../options';\n\nexport abstract class FilterPredicate<T> {\n\n  public abstract equals(itemPair: ItemPair<T>): boolean;\n  public abstract anywhere(itemPair: ItemPair<T>): boolean;\n  public abstract startsWith(itemPair: ItemPair<T>): boolean;\n  public abstract endsWith(itemPair: ItemPair<T>): boolean;\n\n  public executeCondition(itemPair: ItemPair<T>, options: Options): boolean {\n    this.handleLetterCasing(itemPair, options.caseSensitive);\n    switch (options.filterType) {\n      case MatTableFilter.EQUALS:\n        return this.equals(itemPair);\n      case MatTableFilter.ANYWHERE:\n        return this.anywhere(itemPair);\n      case MatTableFilter.STARTS_WITH:\n        return this.startsWith(itemPair);\n      case MatTableFilter.ENDS_WITH:\n        return this.endsWith(itemPair);\n      default:\n        return true;\n    }\n  }\n\n  private handleLetterCasing(itemPair: ItemPair<any>, caseSensitive: boolean): void {\n    if (!caseSensitive) {\n      this.transformAllLowerCase(itemPair);\n    }\n  }\n\n  private transformAllLowerCase(object: any) {\n    // tslint:disable-next-line:forin\n    for (const key in object) {\n      const value = object[key];\n      if (LODASH.isString(value)) {\n        object[key] = value.toLowerCase();\n      } else {\n        this.transformAllLowerCase(value);\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FilterPredicate } from './filter-predicate';\nimport * as LODASH from 'lodash';\nimport { ItemPair } from '../item-pair';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArrayPredicateService extends FilterPredicate<Array<any>> {\n\n  // tslint:disable-next-line:max-line-length\n  private static readonly UNSUPPORTED_OPERATION_WARNING = 'This filterType is unsupported for array filtering. FilterType.ANYWHERE is executed instead!';\n  private static readonly SUGGESTION_WARNING = 'You can set a custom predicate for the array property through PropertyOptions!';\n  constructor() {\n    super();\n  }\n\n  private static warn() {\n    console.warn(ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING);\n    console.warn(ArrayPredicateService.SUGGESTION_WARNING);\n  }\n\n  public equals(itemPair: ItemPair<Array<any>>): boolean {\n    return LODASH.isEqual(itemPair.example.sort(), itemPair.item.sort());\n  }\n  public anywhere(itemPair: ItemPair<Array<any>>): boolean {\n    return this.isSubset(itemPair.example, itemPair.item);\n  }\n  public startsWith(itemPair: ItemPair<Array<any>>): boolean {\n    ArrayPredicateService.warn();\n    return this.anywhere(itemPair);\n  }\n  public endsWith(itemPair: ItemPair<Array<any>>): boolean {\n    ArrayPredicateService.warn();\n    return this.anywhere(itemPair);\n  }\n\n  private isSubset(example: Array<any>, item: Array<any>): boolean {\n    return !LODASH.difference(LODASH.flatten(example), LODASH.flatten(item)).length;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { FilterPredicate } from './filter-predicate';\nimport { ItemPair } from '../item-pair';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlphaNumericPredicateService extends FilterPredicate<string> {\n\n  constructor() {\n    super();\n   }\n\n  public equals(itemPair: ItemPair<string>): boolean {\n    return itemPair.example === itemPair.item;\n  }\n  public anywhere(itemPair: ItemPair<string>): boolean {\n    return itemPair.item.includes(itemPair.example);\n  }\n  public startsWith(itemPair: ItemPair<string>): boolean {\n    return itemPair.item.startsWith(itemPair.example);\n  }\n  public endsWith(itemPair: ItemPair<string>): boolean {\n    return itemPair.item.endsWith(itemPair.example);\n  }\n\n}\n","import { PropertyOptions, PredicateFunc } from '../property-options';\nimport { ItemPair } from './../item-pair';\nimport { ArrayPredicateService } from './array-predicate.service';\nimport { AlphaNumericPredicateService } from './alpha-numeric-predicate.service';\nimport { Injectable } from '@angular/core';\nimport * as LODASH from 'lodash';\nimport { Options } from '../options';\nimport { isFunction } from 'util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatTableFilterService {\n  constructor(private _alphaNumericService: AlphaNumericPredicateService, private _arrayService: ArrayPredicateService) {}\n\n  public filterPredicate(itemPair: ItemPair<any>, propertyOptions: PropertyOptions,\n                         commonOptions: Options | PredicateFunc, propertyName?: string): boolean {\n    // tslint:disable-next-line:forin\n    const exampleKeys = Object.keys(itemPair.example);\n    for (const key of exampleKeys) {\n      const exampleValue = LODASH.cloneDeep(itemPair.example[key]);\n      if (LODASH.isNil(exampleValue) || LODASH.every(exampleValue, LODASH.isEmpty) && typeof exampleValue !== 'boolean') {\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\n        continue;\n      }\n      if (itemPair.item.hasOwnProperty(key)) {\n        // if example entity has additional columns then search fails\n        const itemValue = LODASH.cloneDeep(itemPair.item[key]);\n        const nextPropertyName = this.getNextPropertyName(propertyName, key);\n        const options = this.finalizeOptionsForProperty(commonOptions, propertyOptions, nextPropertyName);\n        if (isFunction(options)) { // if user defined predicate is present for property\n          const customPredicate = options as PredicateFunc;\n          if (!customPredicate(itemValue)) {\n            return false;\n          }\n        } else {\n          const columnOptions = options as Options;\n          if (this.isAlphaNumeric(itemValue)) {\n            const valuePair: ItemPair<string> = {item: itemValue.toString(), example: exampleValue};\n            if (!this._alphaNumericService.executeCondition(valuePair, columnOptions)) {\n              return false;\n            }\n          } else if (LODASH.isArray(itemValue)) {\n            const valuePair: ItemPair<any[]> = {item: itemValue, example: exampleValue};\n            if (!this._arrayService.executeCondition(valuePair, columnOptions)) {\n              return false;\n            }\n          } else if (LODASH.isBoolean(itemValue)) {\n            if (itemValue !== exampleValue) {\n              return false;\n            }\n          } else {\n            const valuePair: ItemPair<any> = {item: itemValue, example: exampleValue};\n            if (!this.filterPredicate(valuePair, propertyOptions, options, nextPropertyName)) {\n              // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\n              // however if it returns false then the item must not be in the list\n              return false;\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private finalizeOptionsForProperty(commonOptions: Options | PredicateFunc, propertyOptions: PropertyOptions, propertyName: string):\n   Options | PredicateFunc {\n    if (propertyOptions && propertyOptions.hasOwnProperty(propertyName)) {\n      return propertyOptions[propertyName];\n    } else {\n      return commonOptions;\n    }\n  }\n\n  private getNextPropertyName(propertyName: string, key: string): string {\n    return propertyName ? (propertyName + '.' + key) : key;\n  }\n\n  public isChanged(oldEntity: any, newEntity: any): boolean {\n    return !LODASH.isEqual(this.toPlainJson(oldEntity), this.toPlainJson(newEntity));\n  }\n\n  public toPlainJson(object: any): JSON {\n    if (object) {\n      return JSON.parse(JSON.stringify(object));\n    } else {\n      return undefined;\n    }\n  }\n\n  private isAlphaNumeric(value: any): boolean {\n    return LODASH.isString(value) || LODASH.isNumber(value);\n  }\n}\n","import { PropertyOptions } from './property-options';\nimport { Directive, DoCheck, Input, ViewContainerRef, Host, Self, Optional } from '@angular/core';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nimport { BehaviorSubject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { MatTableFilter } from './mat-table-filter.enum';\nimport { MatTableFilterService } from './services/mat-table-filter.service';\n\n@Directive({\n  selector: '[matTableFilter]',\n  exportAs: 'matTableFilter'\n})\nexport class MatTableFilterDirective implements DoCheck {\n  private _oldExampleEntity: any;\n\n  @Input() exampleEntity: any;\n\n  /**\n   * in millis\n   */\n  private _table: any;\n  @Input() debounceTime = 400;\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\n  @Input() caseSensitive = false;\n  @Input() customPredicate: (data: any) => boolean;\n  @Input() propertyOptions: PropertyOptions;\n  private _exampleEntitySubject: BehaviorSubject<void>;\n\n\n  constructor(\n    private _filterService: MatTableFilterService,\n    @Host() @Self() @Optional() private _injectedTable: MatTable<any>,\n    private _viewContainerRef: ViewContainerRef\n  ) {\n    this.initCdkTable();\n    this.initDebounceSubject();\n  }\n\n  ngDoCheck(): void {\n    if (this._filterService.isChanged(this._oldExampleEntity, this.exampleEntity)) {\n      this._oldExampleEntity = this._filterService.toPlainJson(this.exampleEntity);\n      this._exampleEntitySubject.next(undefined);\n    }\n  }\n\n\n  private initCdkTable() {\n    // tslint:disable-next-line:no-string-literal\n    const table = this._viewContainerRef['_data']?.componentView?.component;\n\n    if (table) {\n      this._table = table;\n    } else if (this._injectedTable) {\n      this._table = this._injectedTable;\n    } else {\n      throw new Error('Unsupported Angular version!');\n    }\n  }\n\n  private initDebounceSubject() {\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\n    this._exampleEntitySubject.pipe(\n      debounceTime(this.debounceTime))\n      .subscribe(_ => {\n        this.updateFilterPredicate();\n      });\n  }\n\n  private updateFilterPredicate() {\n    const matDataSource = this.getMatDataSource();\n    if (matDataSource) {\n      matDataSource.filterPredicate = this.getFilterPredicate();\n      matDataSource.filter = this.exampleEntity as any;\n    }\n  }\n\n  private getFilterPredicate() {\n    if (this.customPredicate) {\n      return this.customPredicate;\n    } else {\n      return (item: any): boolean => {\n        return this._filterService.filterPredicate({ example: this.exampleEntity, item }, this.propertyOptions,\n          { filterType: this.filterType, caseSensitive: this.caseSensitive });\n      };\n    }\n  }\n\n  private getMatDataSource(): MatTableDataSource<any> {\n    const matTable = this._table as MatTable<any>;\n    return (matTable.dataSource as MatTableDataSource<any>);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\n\n@NgModule({\n  declarations: [MatTableFilterDirective],\n  imports: [\n    MatTableModule\n  ],\n  exports: [MatTableFilterDirective]\n})\nexport class MatTableFilterModule { }\n","\n\n/*\n * Public API Surface of mat-table-filter\n */\nexport * from './lib/mat-table-filter.module';\nexport { MatTableFilterService } from './lib/services/mat-table-filter.service';\nexport { MatTableFilter } from './lib/mat-table-filter.enum';\nexport { Options } from './lib/options';\nexport * from './lib/property-options';\nexport { MatTableFilterDirective } from './lib/mat-table-filter.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["LODASH.isString","LODASH.isEqual","LODASH.difference","LODASH.flatten","LODASH.cloneDeep","LODASH.isNil","LODASH.every","LODASH.isEmpty","LODASH.isArray","LODASH.isBoolean","LODASH.isNumber"],"mappings":"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"}