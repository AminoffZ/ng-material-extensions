{"version":3,"file":"mat-table-filter.js.map","sources":["ng://mat-table-filter/lib/mat-table-filter.enum.ts","ng://mat-table-filter/lib/mat-table-filter.service.ts","ng://mat-table-filter/lib/mat-table-filter.directive.ts","ng://mat-table-filter/lib/mat-table-filter.module.ts"],"sourcesContent":["export enum MatTableFilter {\n  EQUALS = 'EQUALS',\n  ANYWHERE = 'ANYWHERE',\n  STARTS_WITH = 'STARTS_WITH',\n  ENDS_WITH = 'ENDS_WITH'\n}\n","import { Injectable } from '@angular/core';\nimport { MatTableFilter } from './mat-table-filter.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatTableFilterService {\n  constructor() {}\n\n  public filterPredicate(exampleEntity: any, item: any, filterType: MatTableFilter, caseSensitive: boolean): boolean {\n    const exampleEntityObjectKeys = Object.keys(exampleEntity);\n    for (let i = 0; i < exampleEntityObjectKeys.length; i++) {\n      const exampleColumn = exampleEntityObjectKeys[i];\n      const exampleColumnValue = exampleEntity[exampleColumn];\n      const itemColumnValue = item[exampleColumn];\n      if (!exampleColumnValue || exampleColumnValue instanceof Array) {\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\n        // also if there is an array property we are skipping\n        continue;\n      }\n      if (itemColumnValue) {\n        // if example entity has additional columns then search fails\n        if (this.isAlphaNumeric(itemColumnValue)) {\n          if (!this.filterPredicateAlphaNumeric(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            return false;\n          }\n        } else if (this.isBoolean(itemColumnValue)) {\n          if (itemColumnValue !== exampleColumnValue) {\n            return false;\n          }\n        } else {\n          if (!this.filterPredicate(exampleColumnValue, itemColumnValue, filterType, caseSensitive)) {\n            // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\n            // however if it returns false then the item must not be in the list\n            return false;\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private filterPredicateAlphaNumeric(\n    exampleColumnValue: number | string,\n    itemColumnValue: number | string,\n    filterType: MatTableFilter,\n    caseSensitive: boolean\n  ): boolean {\n    let exampleString = exampleColumnValue.toString();\n    let itemString = itemColumnValue.toString();\n    if (!caseSensitive) {\n      exampleString = exampleString.toUpperCase();\n      itemString = itemString.toUpperCase();\n    }\n    let result = true;\n    switch (filterType) {\n      case MatTableFilter.EQUALS:\n        if (exampleColumnValue !== itemColumnValue) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ANYWHERE:\n        if (!itemString.includes(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.STARTS_WITH:\n        if (!itemString.startsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      case MatTableFilter.ENDS_WITH:\n        if (!itemString.endsWith(exampleString)) {\n          result = false;\n        }\n        break;\n      default:\n        break;\n    }\n    return result;\n  }\n\n  private isAlphaNumeric(value: any) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  private isBoolean(value: any) {\n    return typeof value === 'boolean';\n  }\n}\n","import { Directive, DoCheck, Input, ViewContainerRef, Host, Self, Optional } from '@angular/core';\r\nimport { MatTable, MatTableDataSource } from '@angular/material';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { MatTableFilter } from './mat-table-filter.enum';\r\nimport { MatTableFilterService } from './mat-table-filter.service';\r\nimport * as LODASH from 'lodash';\r\n@Directive({\r\n  selector: '[matTableFilter]',\r\n  exportAs: 'matTableFilter'\r\n})\r\nexport class MatTableFilterDirective implements DoCheck {\r\n\r\n  private _oldExampleEntity: any;\r\n\r\n  @Input() exampleEntity: any;\r\n\r\n  /**\r\n   * in millis\r\n   */\r\n  private _table: any;\r\n  @Input() debounceTime = 400;\r\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\r\n  @Input() caseSensitive = false;\r\n\r\n  private _exampleEntitySubject: BehaviorSubject<void>;\r\n\r\n\r\n  constructor(private _filterService: MatTableFilterService,\r\n              @Host() @Self() @Optional() private _injectedTable: MatTable<any>,\r\n              private _viewContainerRef: ViewContainerRef) {\r\n              this.initCdkTable();\r\n              this.initDebounceSubject();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this.isExampleEntityChanged()) {\r\n      this._oldExampleEntity = this.toPlainJson(this.exampleEntity);\r\n      this._exampleEntitySubject.next();\r\n    }\r\n  }\r\n\r\n  private isExampleEntityChanged(): boolean {\r\n    return !LODASH.isEqual(this._oldExampleEntity, this.toPlainJson(this.exampleEntity));\r\n  }\r\n\r\n  private toPlainJson(object: any): JSON {\r\n    if (object) {\r\n      return JSON.parse(JSON.stringify(object));\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  private initCdkTable() {\r\n    // tslint:disable-next-line:no-string-literal\r\n    const table = this._viewContainerRef['_data'].componentView.component;\r\n    if (table) {\r\n      this._table = table;\r\n    } else if (this._injectedTable) {\r\n      this._table = this._injectedTable;\r\n    } else {\r\n      throw new Error('Unsupported Angular version');\r\n    }\r\n  }\r\n\r\n  private initDebounceSubject() {\r\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\r\n    this._exampleEntitySubject.pipe(\r\n     debounceTime(this.debounceTime))\r\n     .subscribe(_ => {\r\n       this.updateFilterPredicate();\r\n     });\r\n  }\r\n\r\n  private updateFilterPredicate() {\r\n    const matDataSource = this.getMatDataSource();\r\n    if (matDataSource) {\r\n      const _this = this;\r\n      matDataSource.filterPredicate = (data): boolean => {\r\n        return _this._filterService.filterPredicate(_this.exampleEntity, data, _this.filterType, _this.caseSensitive);\r\n      }\r\n      matDataSource.filter = this.exampleEntity as any;\r\n    }\r\n\r\n  }\r\n\r\n  private getMatDataSource(): MatTableDataSource<any> {\r\n    const matTable = this._table as MatTable<any>;\r\n    return (matTable.dataSource as MatTableDataSource<any>);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material';\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\n\n@NgModule({\n  declarations: [MatTableFilterDirective],\n  imports: [\n    MatTableModule\n  ],\n  exports: [MatTableFilterDirective]\n})\nexport class MatTableFilterModule { }\n"],"names":["LODASH.isEqual"],"mappings":"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"}
