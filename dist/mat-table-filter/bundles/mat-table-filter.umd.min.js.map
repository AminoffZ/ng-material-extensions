{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://mat-table-filter/lib/mat-table-filter.enum.ts","ng://mat-table-filter/lib/services/filter-predicate.ts","ng://mat-table-filter/lib/services/array-predicate.service.ts","ng://mat-table-filter/lib/services/alpha-numeric-predicate.service.ts","ng://mat-table-filter/lib/services/mat-table-filter.service.ts","ng://mat-table-filter/lib/mat-table-filter.directive.ts","ng://mat-table-filter/lib/mat-table-filter.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","EQUALS","ANYWHERE","STARTS_WITH","ENDS_WITH","FilterPredicate","executeCondition","itemPair","filterType","MatTableFilter","equals","anywhere","startsWith","endsWith","ArrayPredicateService","_super","tslib_1.__extends","LODASH.isEqual","example","sort","item","isSubset","Error","LODASH.difference","LODASH.flatten","Injectable","args","providedIn","AlphaNumericPredicateService","includes","MatTableFilterService","_alphaNumericService","_arrayService","filterPredicate","allOptions","commonOptions","propertyName","exampleKeys","keys","exampleKeys_1","tslib_1.__values","exampleKeys_1_1","key","exampleColumnValue","LODASH.isNil","LODASH.every","LODASH.isEmpty","itemColumnValue","nextPropertyName","getNextPropertyName","options","getOptionsForColumn","isFunction","valuePair","columnOptions","isAlphaNumeric","handleLetterCasing","caseSensitive","LODASH.isArray","LODASH.isBoolean","toUpperCase","isChanged","oldEntity","newEntity","toPlainJson","object","JSON","parse","stringify","LODASH.isString","LODASH.isNumber","MatTableFilterDirective","_filterService","_injectedTable","_viewContainerRef","debounceTime","initCdkTable","initDebounceSubject","ngDoCheck","_oldExampleEntity","exampleEntity","_exampleEntitySubject","table","componentView","component","_table","_this","BehaviorSubject","pipe","subscribe","_","updateFilterPredicate","matDataSource","getMatDataSource","getFilterPredicate","filter","customPredicate","Directive","selector","exportAs","MatTable","decorators","type","Host","Self","Optional","ViewContainerRef","Input","MatTableFilterModule","NgModule","declarations","imports","MatTableModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum MatTableFilter {\n  EQUALS = 'EQUALS',\n  ANYWHERE = 'ANYWHERE',\n  STARTS_WITH = 'STARTS_WITH',\n  ENDS_WITH = 'ENDS_WITH'\n}\n","import { MatTableFilter } from '../mat-table-filter.enum';\r\nimport { ItemPair } from '../item-pair';\r\n\r\nexport abstract class FilterPredicate<T> {\r\n\r\n  public abstract equals(itemPair: ItemPair<T>): boolean;\r\n  public abstract anywhere(itemPair: ItemPair<T>): boolean;\r\n  public abstract startsWith(itemPair: ItemPair<T>): boolean;\r\n  public abstract endsWith(itemPair: ItemPair<T>): boolean;\r\n\r\n  public executeCondition(itemPair: ItemPair<T>, filterType: MatTableFilter): boolean {\r\n    switch (filterType) {\r\n      case MatTableFilter.EQUALS:\r\n        return this.equals(itemPair);\r\n      case MatTableFilter.ANYWHERE:\r\n        return this.anywhere(itemPair);\r\n      case MatTableFilter.STARTS_WITH:\r\n        return this.startsWith(itemPair);\r\n      case MatTableFilter.ENDS_WITH:\r\n        return this.endsWith(itemPair);\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { FilterPredicate } from './filter-predicate';\nimport * as LODASH from 'lodash';\nimport { ItemPair } from '../item-pair';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ArrayPredicateService extends FilterPredicate<Array<any>> {\n\n  constructor() {\n    super();\n  }\n\n  public equals(itemPair: ItemPair<Array<any>>): boolean {\n    return LODASH.isEqual(itemPair.example.sort(), itemPair.item.sort());\n  }\n  public anywhere(itemPair: ItemPair<Array<any>>): boolean {\n    return this.isSubset(itemPair.example, itemPair.item);\n  }\n  public startsWith(itemPair: ItemPair<Array<any>>): boolean {\n    throw new Error('Unsupported Operation');\n  }\n  public endsWith(itemPair: ItemPair<Array<any>>): boolean {\n    throw new Error('Unsupported Operation');\n  }\n\n  private isSubset(example: Array<any>, item: Array<any>): boolean {\n    return !LODASH.difference(LODASH.flatten(example), LODASH.flatten(item)).length;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { FilterPredicate } from './filter-predicate';\nimport { ItemPair } from '../item-pair';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlphaNumericPredicateService extends FilterPredicate<string> {\n\n  constructor() {\n    super();\n   }\n\n  public equals(itemPair: ItemPair<string>): boolean {\n    return itemPair.example === itemPair.item;\n  }\n  public anywhere(itemPair: ItemPair<string>): boolean {\n    return itemPair.item.includes(itemPair.example);\n  }\n  public startsWith(itemPair: ItemPair<string>): boolean {\n    return itemPair.item.startsWith(itemPair.example);\n  }\n  public endsWith(itemPair: ItemPair<string>): boolean {\n    return itemPair.item.endsWith(itemPair.example);\n  }\n\n}\n","import { ColumnOptions, PredicateFunc } from './../column-options';\nimport { ItemPair } from './../item-pair';\nimport { ArrayPredicateService } from './array-predicate.service';\nimport { AlphaNumericPredicateService } from './alpha-numeric-predicate.service';\nimport { Injectable } from '@angular/core';\nimport * as LODASH from 'lodash';\nimport { Options } from '../options';\nimport { isFunction } from 'util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MatTableFilterService {\n  constructor(private _alphaNumericService: AlphaNumericPredicateService, private _arrayService: ArrayPredicateService) {}\n\n  public filterPredicate(itemPair: ItemPair<any>, allOptions: ColumnOptions,\n                         commonOptions: Options | PredicateFunc, propertyName?: string): boolean {\n    // tslint:disable-next-line:forin\n    const exampleKeys = Object.keys(itemPair.example);\n    for (const key of exampleKeys) {\n      const exampleColumnValue = itemPair.example[key];\n      if (LODASH.isNil(exampleColumnValue) || LODASH.every(exampleColumnValue, LODASH.isEmpty) && typeof exampleColumnValue !== 'boolean') {\n        // if example entity's property is undefined/null/empty then it means the caller wants all the data\n        continue;\n      }\n      if (itemPair.item.hasOwnProperty(key)) {\n        // if example entity has additional columns then search fails\n        const itemColumnValue = itemPair.item[key];\n        const nextPropertyName = this.getNextPropertyName(propertyName, key);\n        const options = this.getOptionsForColumn(commonOptions, allOptions, nextPropertyName);\n        if (isFunction(options)) { // if user defined predicate is present for property\n          const customPredicate = options as PredicateFunc;\n          if (!customPredicate(itemColumnValue)) {\n            return false;\n          }\n        } else {\n          const valuePair = {item: itemColumnValue, example: exampleColumnValue};\n          const columnOptions = options as Options;\n          if (this.isAlphaNumeric(itemColumnValue)) {\n            this.handleLetterCasing(valuePair, columnOptions.caseSensitive);\n            if (!this._alphaNumericService.executeCondition(valuePair, columnOptions.filterType)) {\n              return false;\n            }\n          } else if (LODASH.isArray(itemColumnValue)) {\n            if (!this._arrayService.executeCondition(valuePair, columnOptions.filterType)) {\n              return false;\n            }\n          } else if (LODASH.isBoolean(itemColumnValue)) {\n            if (itemColumnValue !== exampleColumnValue) {\n              return false;\n            }\n          } else {\n            if (!this.filterPredicate(valuePair, allOptions, options, nextPropertyName)) {\n              // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\n              // however if it returns false then the item must not be in the list\n              return false;\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private handleLetterCasing(itemPair: ItemPair<string>, caseSensitive: boolean): void {\n    if (!caseSensitive) {\n      itemPair.example = itemPair.example.toUpperCase();\n      itemPair.item = itemPair.item.toUpperCase();\n    }\n  }\n\n  private getOptionsForColumn(commonOptions: Options | PredicateFunc, columnOptions: ColumnOptions, propertyName?: string):\n   Options | PredicateFunc {\n    if (columnOptions && columnOptions.hasOwnProperty(propertyName)) {\n      return columnOptions[propertyName];\n    } else {\n      return commonOptions;\n    }\n  }\n\n  private getNextPropertyName(propertyName: string, key: string): string {\n    return propertyName ? (propertyName + '.' + key) : key;\n  }\n\n  public isChanged(oldEntity: any, newEntity: any): boolean {\n    return !LODASH.isEqual(this.toPlainJson(oldEntity), this.toPlainJson(newEntity));\n  }\n\n  public toPlainJson(object: any): JSON {\n    if (object) {\n      return JSON.parse(JSON.stringify(object));\n    } else {\n      return undefined;\n    }\n  }\n\n  private isAlphaNumeric(value: any): boolean {\n    return LODASH.isString(value) || LODASH.isNumber(value);\n  }\n}\n","import { ColumnOptions } from './column-options';\r\nimport { Directive, DoCheck, Input, ViewContainerRef, Host, Self, Optional } from '@angular/core';\r\nimport { MatTable, MatTableDataSource } from '@angular/material';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { MatTableFilter } from './mat-table-filter.enum';\r\nimport { MatTableFilterService } from './services/mat-table-filter.service';\r\n\r\n@Directive({\r\n  selector: '[matTableFilter]',\r\n  exportAs: 'matTableFilter'\r\n})\r\nexport class MatTableFilterDirective implements DoCheck {\r\n\r\n  private _oldExampleEntity: any;\r\n\r\n  @Input() exampleEntity: any;\r\n\r\n  /**\r\n   * in millis\r\n   */\r\n  private _table: any;\r\n  @Input() debounceTime = 400;\r\n  @Input() filterType: MatTableFilter = MatTableFilter.ANYWHERE;\r\n  @Input() caseSensitive = false;\r\n  @Input() customPredicate: (data: any) => boolean;\r\n  @Input() columnOptions: ColumnOptions;\r\n  private _exampleEntitySubject: BehaviorSubject<void>;\r\n\r\n\r\n  constructor(private _filterService: MatTableFilterService,\r\n              @Host() @Self() @Optional() private _injectedTable: MatTable<any>,\r\n              private _viewContainerRef: ViewContainerRef) {\r\n              this.initCdkTable();\r\n              this.initDebounceSubject();\r\n  }\r\n\r\n  ngDoCheck(): void {\r\n    if (this._filterService.isChanged(this._oldExampleEntity, this.exampleEntity)) {\r\n      this._oldExampleEntity = this._filterService.toPlainJson(this.exampleEntity);\r\n      this._exampleEntitySubject.next();\r\n    }\r\n  }\r\n\r\n\r\n  private initCdkTable() {\r\n    // tslint:disable-next-line:no-string-literal\r\n    const table = this._viewContainerRef['_data'].componentView.component;\r\n    if (table) {\r\n      this._table = table;\r\n    } else if (this._injectedTable) {\r\n      this._table = this._injectedTable;\r\n    } else {\r\n      throw new Error('Unsupported Angular version!');\r\n    }\r\n  }\r\n\r\n  private initDebounceSubject() {\r\n    this._exampleEntitySubject = new BehaviorSubject<void>(null);\r\n    this._exampleEntitySubject.pipe(\r\n     debounceTime(this.debounceTime))\r\n     .subscribe(_ => {\r\n       this.updateFilterPredicate();\r\n     });\r\n  }\r\n\r\n  private updateFilterPredicate() {\r\n    const matDataSource = this.getMatDataSource();\r\n    if (matDataSource) {\r\n      matDataSource.filterPredicate = this.getFilterPredicate();\r\n      matDataSource.filter = this.exampleEntity as any;\r\n    }\r\n  }\r\n\r\n  private getFilterPredicate() {\r\n    if (this.customPredicate) {\r\n      return this.customPredicate;\r\n    } else {\r\n      return (item: any): boolean => {\r\n        return this._filterService.filterPredicate({example: this.exampleEntity, item}, this.columnOptions,\r\n         {filterType: this.filterType, caseSensitive: this.caseSensitive});\r\n      };\r\n    }\r\n  }\r\n\r\n  private getMatDataSource(): MatTableDataSource<any> {\r\n    const matTable = this._table as MatTable<any>;\r\n    return (matTable.dataSource as MatTableDataSource<any>);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material';\nimport { MatTableFilterDirective } from './mat-table-filter.directive';\n\n@NgModule({\n  declarations: [MatTableFilterDirective],\n  imports: [\n    MatTableModule\n  ],\n  exports: [MatTableFilterDirective]\n})\nexport class MatTableFilterModule { }\n"]}