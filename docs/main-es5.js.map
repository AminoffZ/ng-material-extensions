{"version":3,"sources":["webpack:///dist/mat-table-exporter/fesm2015/mat-table-exporter.js","webpack:///src/app/components/filter/filter.component.ts","webpack:///src/app/components/examples/custom-exporter/custom-exporter.component.ts","webpack:///fs (ignored)","webpack:///dist/mat-table-filter/fesm2015/mat-table-filter.js","webpack:///src/app/components/examples/brief-exporter/brief-exporter.component.ts","webpack:///src/environments/environment.ts","webpack:///src/app/components/filter/filter.component.html","webpack:///src/app/components/exporter/exporter.component.html","webpack:///src/app/components/examples/array-filter/array-filter.component.html","webpack:///src/app/components/examples/array-filter/array-filter.component.ts","webpack:///src/app/app.component.ts","webpack:///src/app/components/example-viewer/example-viewer.component.html","webpack:///src/app/components/examples/brief-exporter/brief-exporter.component.html","webpack:///src/app/components/examples/custom-column-filter/custom-column-filter.component.ts","webpack:///src/app/components/examples/custom-exporter/custom-exporter.component.html","webpack:///src/app/components/examples/custom-column-filter/custom-column-filter.component.html","webpack:///src/app/components/examples/property-options/property-options.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/components/examples/simple-filter/simple-filter.component.ts","webpack:///src/app/components/examples/selection-exporter/selection-exporter.component.ts","webpack:///src/app/components/example-viewer/example-viewer.component.ts","webpack:///dist/cdk-table-exporter/fesm2015/cdk-table-exporter.js","webpack:///src/app/components/exporter/exporter.component.ts","webpack:///src/app/components/examples/simple-filter/simple-filter.component.html","webpack:///src/app/components/add-to-showcase.ts","webpack:///src/app/components/base-component.ts","webpack:///src/app/components/examples/property-options/property-options.component.html","webpack:///src/app/app.component.html","webpack:///src/app/components/examples/selection-exporter/selection-exporter.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["MatTableExporterDirective","renderer","serviceLocator","dataExtractor","table","exportStarted","subscribe","_","enablePaginator","exportCompleted","getPaginator","getNumberOfPages","_a","_b","pageSize","pageIndex","_c","_d","_e","length","getDataSource","data","index","_changePageSize","page","_cdkTable","dataSource","paginator","value","disabled","decorators","type","args","selector","exportAs","ctorParameters","MatTableExporterModule","declarations","imports","exports","FilterComponent","examples","get","CustomExporter","rows","options","console","log","CustomExporterComponent","title","displayedColumns","ELEMENT_DATA","customExporter","position","name","surname","birth","MatTableFilter","FilterPredicate","itemPair","handleLetterCasing","caseSensitive","filterType","EQUALS","equals","ANYWHERE","anywhere","STARTS_WITH","startsWith","ENDS_WITH","endsWith","transformAllLowerCase","object","key","toLowerCase","ArrayPredicateService","example","sort","item","isSubset","warn","UNSUPPORTED_OPERATION_WARNING","SUGGESTION_WARNING","Éµprov","factory","ArrayPredicateService_Factory","token","providedIn","AlphaNumericPredicateService","includes","AlphaNumericPredicateService_Factory","MatTableFilterService","_alphaNumericService","_arrayService","propertyOptions","commonOptions","propertyName","exampleKeys","Object","keys","exampleValue","hasOwnProperty","itemValue","nextPropertyName","getNextPropertyName","finalizeOptionsForProperty","customPredicate","columnOptions","isAlphaNumeric","valuePair","toString","executeCondition","filterPredicate","oldEntity","newEntity","toPlainJson","JSON","parse","stringify","undefined","MatTableFilterService_Factory","MatTableFilterDirective","_filterService","_table","debounceTime","initDebounceSubject","isChanged","_oldExampleEntity","exampleEntity","_exampleEntitySubject","next","pipe","updateFilterPredicate","matDataSource","getMatDataSource","getFilterPredicate","filter","matTable","propDecorators","MatTableFilterModule","BriefExporterComponent","environment","production","Product","PRODUCTS","category","brand","availableSizes","ArrayFilterComponent","separatorKeysCodes","event","input","trim","filterEntity","push","size","indexOf","splice","Array","AppComponent","Route","ROUTES","journeyTime","CustomColumnFilterComponent","routeName","split","Captain","SpaceCraft","SPACECRAFT_DATA","isConstitutionClass","captain","PropertyOptionsComponent","markedOptions","gfm","breaks","pedantic","smartLists","smartypants","AppModule","SimpleFilterComponent","SelectionExporterComponent","selection","numSelected","selected","numRows","row","toggle","exporter","toggleRow","isAllSelected","isSelected","ExampleViewerComponent","showSource","extension","ASSETS_ROOT","SOURCES_PATH","fileName","replace","prototype","description","htmlDoc","resolveFilePath","tsDoc","cssDoc","CdkTableExporterModule","ExportType","DataExtractorService","cdkTable","hiddenColumns","outlet","getRowsAsJsonArray","_rowOutlet","renderedRows","getRenderedRows","convertToJsonArray","_getRenderedRows","result","i","convertRow","createExcelItem","cells","children","shouldHide","element","innerText","columnIndex","assign","DataExtractorService_Factory","Mime","contentTypeHeader","MAT_TABLE_EXPORTER","TYPE_ARRAY","CHAR_SET_UTF","CHAR_SET_UTF_8","CONTENT_TYPE_TEXT","TXT","CONTENT_TYPE_APPLICATION","CONTENT_TYPE_EXCEL","DOT","COMMA","EXTENSION_XLS","XLS","EXTENSION_XLSX","XLSX","EXTENSION_CSV","CSV","EXTENSION_JSON","EXTENSION_TEXT","MIME_EXCEL_XLS","MIME_EXCEL_XLSX","MIME_JSON","MIME_TXT","MIME_CSV","REF","XLS_REGEX","RETURN","TAB","XLSX_COLS","BOM","FileUtil","content","mime","blob","Blob","match","isXls","FileExporter","Error","createContent","mimeType","getMimeType","save","WorksheetExporter","workSheet","json_to_sheet","skipHeader","workSheetToContent","CsvExporterService","worksheet","sheet_to_csv","FS","delimiter","CsvExporterService_Factory","TxtExporterService","forEach","values","join","getDelimiter","TxtExporterService_Factory","XlsExporterService","workBook","book_new","columnWidths","convertToWch","correctTypes","book_append_sheet","sheet","bookType","map","width","wch","XlsExporterService_Factory","JsonExporterService","JsonExporterService_Factory","XlsxExporterService","XlsxExporterService_Factory","ServiceLocatorService","injector","exportType","valueOf","OTHER","ServiceLocatorService_Factory","CdkTableExporter","loadExporter","_options","emit","_isIterating","_isExporting","_data","extractTableHeader","exportWithPagination","notPaginated","exportSinglePage","paginatedRowIndex","getPaginatedRowIndex","isToggleOn","toggleOff","toggleOn","_selectedRows","x","_exporterService","getService","_initialPageIndex","getCurrentPageIndex","initPageHandler","goToPage","extractDataOnCurrentPage","extractTableFooter","exportExtractedData","extractRows","concat","getSelectedRows","isSelectiveExport","isMasterToggleOff","isMasterToggleOn","compareSelectedRowCount","getTotalItemsCount","rowCount","_subscription","getPageChangeObservable","setTimeout","hasNextPage","nextPage","extractSpecialRows","_headerRowOutlet","_footerRowOutlet","getPageCount","getPageSize","ExporterComponent","showCaseExamples","Map","AddToShowCase","categoryName","categoryArray","set","BaseComponent","err","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","code","module","id"],"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","file":"main-es5.js","sourcesContent":["import { CdkTableExporter, ServiceLocatorService, DataExtractorService, CdkTableExporterModule } from 'cdk-table-exporter';\nexport * from 'cdk-table-exporter';\nimport { MatTable, MatTableModule } from '@angular/material/table';\nimport { Directive, Renderer2, Host, Self, Optional, NgModule } from '@angular/core';\n\nclass MatTableExporterDirective extends CdkTableExporter {\r\n    constructor(renderer, serviceLocator, dataExtractor, table) {\r\n        super(renderer, serviceLocator, dataExtractor, table);\r\n    }\r\n    /**\r\n     * Overriding ngAfterViewInit of TableExporter\r\n     */\r\n    ngAfterViewInit() {\r\n        this.exportStarted.subscribe(_ => {\r\n            this.enablePaginator(false);\r\n        });\r\n        this.exportCompleted.subscribe(_ => {\r\n            this.enablePaginator(true);\r\n        });\r\n    }\r\n    /**\r\n     * MatTable implementation of getPageCount\r\n     */\r\n    getPageCount() {\r\n        return this.getPaginator().getNumberOfPages();\r\n    }\r\n    /**\r\n     * MatTable implementation of getPageSize\r\n     */\r\n    getPageSize() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.pageSize) !== null && _b !== void 0 ? _b : 0;\r\n    }\r\n    /**\r\n     * MatTable implementation of getCurrentPageIndex\r\n     */\r\n    getCurrentPageIndex() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.pageIndex) !== null && _b !== void 0 ? _b : 0;\r\n    }\r\n    /**\r\n     * MatTable implementation of getTotalItemsCount\r\n     */\r\n    getTotalItemsCount() {\r\n        var _a, _b, _c, _d, _e;\r\n        return (_e = (_b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : (_d = (_c = this.getDataSource()) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0;\r\n    }\r\n    /**\r\n     * MatTable implementation of goToPage\r\n     */\r\n    goToPage(index) {\r\n        this.getPaginator().pageIndex = index;\r\n        this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n    }\r\n    /**\r\n     * MatTable implementation of getPageChangeObservable\r\n     */\r\n    getPageChangeObservable() {\r\n        return this.getPaginator().page;\r\n    }\r\n    getDataSource() {\r\n        return this._cdkTable.dataSource;\r\n    }\r\n    getPaginator() {\r\n        return this.getDataSource().paginator;\r\n    }\r\n    enablePaginator(value) {\r\n        if (this.getPaginator()) {\r\n            this.getPaginator().disabled = !value;\r\n            this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n        }\r\n    }\r\n}\r\nMatTableExporterDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTableExporter]',\r\n                exportAs: 'matTableExporter'\r\n            },] }\r\n];\r\nMatTableExporterDirective.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: ServiceLocatorService },\r\n    { type: DataExtractorService },\r\n    { type: MatTable, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }\r\n];\n\nclass MatTableExporterModule {\r\n}\r\nMatTableExporterModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [MatTableExporterDirective],\r\n                imports: [\r\n                    MatTableModule,\r\n                    CdkTableExporterModule\r\n                ],\r\n                exports: [MatTableExporterDirective]\r\n            },] }\r\n];\n\n/*\r\n * Public API Surface of mat-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MatTableExporterDirective, MatTableExporterModule };\n//# sourceMappingURL=mat-table-exporter.js.map\n","import { showCaseExamples } from './../add-to-showcase';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BaseComponent } from '../base-component';\r\n\r\n@Component({\r\n  selector: 'app-filter',\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.css']\r\n})\r\nexport class FilterComponent extends BaseComponent implements OnInit {\r\n\r\n  ngOnInit() {\r\n    this.examples = showCaseExamples.get('filter');\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { Exporter, Options } from 'mat-table-exporter';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\n\r\nexport class CustomExporter implements Exporter<Options> {\r\n  export(rows: Array<any>, options?: Options) {\r\n    console.log(rows);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-custom-exporter',\r\n  templateUrl: './custom-exporter.component.html',\r\n  styleUrls: ['./custom-exporter.component.css']\r\n})\r\n@AddToShowCase('exporter', 'custom-exporter.component', 'Custom Exporting Implementation')\r\nexport class CustomExporterComponent implements OnInit, AfterViewInit {\r\n  title = 'mte-test';\r\n  displayedColumns = ['position', 'name', 'surname', 'birth'];\r\n\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  dataSource: MatTableDataSource<Element>;\r\n  customExporter: CustomExporter;\r\n  ngOnInit(): void {\r\n    this.dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\r\n    this.customExporter = new CustomExporter(); // YOU CAN BENEFIT FROM DI TOO.\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n}\r\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  surname: string;\r\n  birth: string;\r\n}\r\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  { position: 1, name: 'Albert', surname: 'Einstein', birth: '1879' },\r\n  { position: 2, name: 'Marie', surname: 'Curie', birth: '1867' },\r\n  { position: 3, name: 'Enrico', surname: 'Fermi', birth: '1901' },\r\n  { position: 4, name: 'Dmitri', surname: 'Mendeleev', birth: '1834' },\r\n  { position: 5, name: 'Alfred', surname: 'Nobel', birth: '1833' },\r\n  { position: 6, name: 'Ernest', surname: 'Lawrence', birth: '1901' },\r\n  { position: 7, name: 'Glenn', surname: 'Seaborg', birth: '1912' },\r\n  { position: 8, name: 'Niels', surname: 'Bohr', birth: '1885' },\r\n  { position: 9, name: 'Lise', surname: 'Meitner', birth: '1878' },\r\n  { position: 10, name: 'Wilhelm', surname: 'RÃ¶ntgen', birth: '1845' },\r\n  { position: 11, name: 'Nicolaus', surname: 'Copernicus', birth: '1473' },\r\n  { position: 12, name: 'Georgy', surname: 'Flyorov', birth: '1913' },\r\n  { position: 13, name: 'Yuri', surname: 'Oganessian', birth: '1933' },\r\n  { position: 14, name: 'Johan', surname: 'Gadolin', birth: '1760' },\r\n  { position: 15, name: 'Pierre', surname: 'Curie', birth: '1859' },\r\n];\r\n","/* (ignored) */","import { ÉµÉµdefineInjectable, Injectable, ÉµÉµinject, Directive, Host, Self, Optional, Input, NgModule } from '@angular/core';\nimport { MatTable, MatTableModule } from '@angular/material/table';\nimport { BehaviorSubject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport isString from 'lodash-es/isString';\nimport isEqual from 'lodash-es/isEqual';\nimport difference from 'lodash-es/difference';\nimport flatten from 'lodash-es/flatten';\nimport cloneDeep from 'lodash-es/cloneDeep';\nimport isNil from 'lodash-es/isNil';\nimport every from 'lodash-es/every';\nimport isFunction from 'lodash-es/isFunction';\nimport isArray from 'lodash-es/isArray';\nimport isBoolean from 'lodash-es/isBoolean';\nimport isNumber from 'lodash-es/isNumber';\nimport isEmpty from 'lodash-es/isEmpty';\n\nvar MatTableFilter;\r\n(function (MatTableFilter) {\r\n    MatTableFilter[\"EQUALS\"] = \"EQUALS\";\r\n    MatTableFilter[\"ANYWHERE\"] = \"ANYWHERE\";\r\n    MatTableFilter[\"STARTS_WITH\"] = \"STARTS_WITH\";\r\n    MatTableFilter[\"ENDS_WITH\"] = \"ENDS_WITH\";\r\n})(MatTableFilter || (MatTableFilter = {}));\n\nclass FilterPredicate {\r\n    executeCondition(itemPair, options) {\r\n        this.handleLetterCasing(itemPair, options.caseSensitive);\r\n        switch (options.filterType) {\r\n            case MatTableFilter.EQUALS:\r\n                return this.equals(itemPair);\r\n            case MatTableFilter.ANYWHERE:\r\n                return this.anywhere(itemPair);\r\n            case MatTableFilter.STARTS_WITH:\r\n                return this.startsWith(itemPair);\r\n            case MatTableFilter.ENDS_WITH:\r\n                return this.endsWith(itemPair);\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n    handleLetterCasing(itemPair, caseSensitive) {\r\n        if (!caseSensitive) {\r\n            this.transformAllLowerCase(itemPair);\r\n        }\r\n    }\r\n    transformAllLowerCase(object) {\r\n        // tslint:disable-next-line:forin\r\n        for (const key in object) {\r\n            const value = object[key];\r\n            if (isString(value)) {\r\n                object[key] = value.toLowerCase();\r\n            }\r\n            else {\r\n                this.transformAllLowerCase(value);\r\n            }\r\n        }\r\n    }\r\n}\n\nclass ArrayPredicateService extends FilterPredicate {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static warn() {\r\n        console.warn(ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING);\r\n        console.warn(ArrayPredicateService.SUGGESTION_WARNING);\r\n    }\r\n    equals(itemPair) {\r\n        return isEqual(itemPair.example.sort(), itemPair.item.sort());\r\n    }\r\n    anywhere(itemPair) {\r\n        return this.isSubset(itemPair.example, itemPair.item);\r\n    }\r\n    startsWith(itemPair) {\r\n        ArrayPredicateService.warn();\r\n        return this.anywhere(itemPair);\r\n    }\r\n    endsWith(itemPair) {\r\n        ArrayPredicateService.warn();\r\n        return this.anywhere(itemPair);\r\n    }\r\n    isSubset(example, item) {\r\n        return !difference(flatten(example), flatten(item)).length;\r\n    }\r\n}\r\n// tslint:disable-next-line:max-line-length\r\nArrayPredicateService.UNSUPPORTED_OPERATION_WARNING = 'This filterType is unsupported for array filtering. FilterType.ANYWHERE is executed instead!';\r\nArrayPredicateService.SUGGESTION_WARNING = 'You can set a custom predicate for the array property through PropertyOptions!';\r\nArrayPredicateService.Éµprov = ÉµÉµdefineInjectable({ factory: function ArrayPredicateService_Factory() { return new ArrayPredicateService(); }, token: ArrayPredicateService, providedIn: \"root\" });\r\nArrayPredicateService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nArrayPredicateService.ctorParameters = () => [];\n\nclass AlphaNumericPredicateService extends FilterPredicate {\r\n    constructor() {\r\n        super();\r\n    }\r\n    equals(itemPair) {\r\n        return itemPair.example === itemPair.item;\r\n    }\r\n    anywhere(itemPair) {\r\n        return itemPair.item.includes(itemPair.example);\r\n    }\r\n    startsWith(itemPair) {\r\n        return itemPair.item.startsWith(itemPair.example);\r\n    }\r\n    endsWith(itemPair) {\r\n        return itemPair.item.endsWith(itemPair.example);\r\n    }\r\n}\r\nAlphaNumericPredicateService.Éµprov = ÉµÉµdefineInjectable({ factory: function AlphaNumericPredicateService_Factory() { return new AlphaNumericPredicateService(); }, token: AlphaNumericPredicateService, providedIn: \"root\" });\r\nAlphaNumericPredicateService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nAlphaNumericPredicateService.ctorParameters = () => [];\n\nclass MatTableFilterService {\r\n    constructor(_alphaNumericService, _arrayService) {\r\n        this._alphaNumericService = _alphaNumericService;\r\n        this._arrayService = _arrayService;\r\n    }\r\n    filterPredicate(itemPair, propertyOptions, commonOptions, propertyName) {\r\n        var _a;\r\n        // tslint:disable-next-line:forin\r\n        const exampleKeys = Object.keys(itemPair.example);\r\n        for (const key of exampleKeys) {\r\n            const exampleValue = cloneDeep(itemPair.example[key]);\r\n            if (isNil(exampleValue) || every(exampleValue, isEmpty) && typeof exampleValue !== 'boolean') {\r\n                // if example entity's property is undefined/null/empty then it means the caller wants all the data\r\n                continue;\r\n            }\r\n            if ((_a = itemPair.item) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(key)) {\r\n                // if example entity has additional columns then search fails\r\n                const itemValue = cloneDeep(itemPair.item[key]);\r\n                const nextPropertyName = this.getNextPropertyName(propertyName, key);\r\n                const options = this.finalizeOptionsForProperty(commonOptions, propertyOptions, nextPropertyName);\r\n                if (isFunction(options)) { // if user defined predicate is present for property\r\n                    const customPredicate = options;\r\n                    if (!customPredicate(itemValue)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    const columnOptions = options;\r\n                    if (this.isAlphaNumeric(itemValue)) {\r\n                        const valuePair = { item: itemValue.toString(), example: exampleValue };\r\n                        if (!this._alphaNumericService.executeCondition(valuePair, columnOptions)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (isArray(itemValue)) {\r\n                        const valuePair = { item: itemValue, example: exampleValue };\r\n                        if (!this._arrayService.executeCondition(valuePair, columnOptions)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (isBoolean(itemValue)) {\r\n                        if (itemValue !== exampleValue) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        const valuePair = { item: itemValue, example: exampleValue };\r\n                        if (!this.filterPredicate(valuePair, propertyOptions, options, nextPropertyName)) {\r\n                            // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\r\n                            // however if it returns false then the item must not be in the list\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    finalizeOptionsForProperty(commonOptions, propertyOptions, propertyName) {\r\n        if (propertyOptions && propertyOptions.hasOwnProperty(propertyName)) {\r\n            return propertyOptions[propertyName];\r\n        }\r\n        else {\r\n            return commonOptions;\r\n        }\r\n    }\r\n    getNextPropertyName(propertyName, key) {\r\n        return propertyName ? (propertyName + '.' + key) : key;\r\n    }\r\n    isChanged(oldEntity, newEntity) {\r\n        return !isEqual(this.toPlainJson(oldEntity), this.toPlainJson(newEntity));\r\n    }\r\n    toPlainJson(object) {\r\n        if (object) {\r\n            return JSON.parse(JSON.stringify(object));\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    isAlphaNumeric(value) {\r\n        return isString(value) || isNumber(value);\r\n    }\r\n}\r\nMatTableFilterService.Éµprov = ÉµÉµdefineInjectable({ factory: function MatTableFilterService_Factory() { return new MatTableFilterService(ÉµÉµinject(AlphaNumericPredicateService), ÉµÉµinject(ArrayPredicateService)); }, token: MatTableFilterService, providedIn: \"root\" });\r\nMatTableFilterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nMatTableFilterService.ctorParameters = () => [\r\n    { type: AlphaNumericPredicateService },\r\n    { type: ArrayPredicateService }\r\n];\n\nclass MatTableFilterDirective {\r\n    constructor(_filterService, _table) {\r\n        this._filterService = _filterService;\r\n        this._table = _table;\r\n        /**\r\n         * in millis\r\n         */\r\n        this.debounceTime = 400;\r\n        this.filterType = MatTableFilter.ANYWHERE;\r\n        this.caseSensitive = false;\r\n        this.initDebounceSubject();\r\n    }\r\n    ngDoCheck() {\r\n        if (this._filterService.isChanged(this._oldExampleEntity, this.exampleEntity)) {\r\n            this._oldExampleEntity = this._filterService.toPlainJson(this.exampleEntity);\r\n            this._exampleEntitySubject.next(undefined);\r\n        }\r\n    }\r\n    initDebounceSubject() {\r\n        this._exampleEntitySubject = new BehaviorSubject(null);\r\n        this._exampleEntitySubject.pipe(debounceTime(this.debounceTime))\r\n            .subscribe(_ => {\r\n            this.updateFilterPredicate();\r\n        });\r\n    }\r\n    updateFilterPredicate() {\r\n        const matDataSource = this.getMatDataSource();\r\n        if (matDataSource) {\r\n            matDataSource.filterPredicate = this.getFilterPredicate();\r\n            matDataSource.filter = this.exampleEntity;\r\n        }\r\n    }\r\n    getFilterPredicate() {\r\n        if (this.customPredicate) {\r\n            return this.customPredicate;\r\n        }\r\n        else {\r\n            return (item) => {\r\n                return this._filterService.filterPredicate({ example: this.exampleEntity, item }, this.propertyOptions, { filterType: this.filterType, caseSensitive: this.caseSensitive });\r\n            };\r\n        }\r\n    }\r\n    getMatDataSource() {\r\n        const matTable = this._table;\r\n        return matTable.dataSource;\r\n    }\r\n}\r\nMatTableFilterDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTableFilter]',\r\n                exportAs: 'matTableFilter'\r\n            },] }\r\n];\r\nMatTableFilterDirective.ctorParameters = () => [\r\n    { type: MatTableFilterService },\r\n    { type: MatTable, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }\r\n];\r\nMatTableFilterDirective.propDecorators = {\r\n    exampleEntity: [{ type: Input }],\r\n    debounceTime: [{ type: Input }],\r\n    filterType: [{ type: Input }],\r\n    caseSensitive: [{ type: Input }],\r\n    customPredicate: [{ type: Input }],\r\n    propertyOptions: [{ type: Input }]\r\n};\n\nclass MatTableFilterModule {\r\n}\r\nMatTableFilterModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [MatTableFilterDirective],\r\n                imports: [\r\n                    MatTableModule\r\n                ],\r\n                exports: [MatTableFilterDirective]\r\n            },] }\r\n];\n\n/*\r\n * Public API Surface of mat-table-filter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MatTableFilter, MatTableFilterDirective, MatTableFilterModule, MatTableFilterService, AlphaNumericPredicateService as Éµa, FilterPredicate as Éµb, ArrayPredicateService as Éµc };\n//# sourceMappingURL=mat-table-filter.js.map\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\n\r\n@Component({\r\n  selector: 'app-brief-exporter',\r\n  templateUrl: './brief-exporter.component.html',\r\n  styleUrls: ['./brief-exporter.component.css']\r\n})\r\n@AddToShowCase('exporter', 'brief-exporter.component', 'Overall Exporting Example')\r\nexport class BriefExporterComponent implements AfterViewInit, OnInit {\r\n  title = 'mte-test';\r\n  displayedColumns = ['position', 'name', 'surname', 'birth'];\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  dataSource: MatTableDataSource<Element>;\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n}\r\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  surname: string;\r\n  birth: string;\r\n}\r\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  { position: 1, name: 'Albert', surname: 'Einstein', birth: '1879' },\r\n  { position: 2, name: 'Marie', surname: 'Curie', birth: '1867' },\r\n  { position: 3, name: 'Enrico', surname: 'Fermi', birth: '1901' },\r\n  { position: 4, name: 'Dmitri', surname: 'Mendeleev', birth: '1834' },\r\n  { position: 5, name: 'Alfred', surname: 'Nobel', birth: '1833' },\r\n  { position: 6, name: 'Ernest', surname: 'Lawrence', birth: '1901' },\r\n  { position: 7, name: 'Glenn', surname: 'Seaborg', birth: '1912' },\r\n  { position: 8, name: 'Niels', surname: 'Bohr', birth: '1885' },\r\n  { position: 9, name: 'Lise', surname: 'Meitner', birth: '1878' },\r\n  { position: 10, name: 'Wilhelm', surname: 'RÃ¶ntgen', birth: '1845' },\r\n  { position: 11, name: 'Nicolaus', surname: 'Copernicus', birth: '1473' },\r\n  { position: 12, name: 'Georgy', surname: 'Flyorov', birth: '1913' },\r\n  { position: 13, name: 'Yuri', surname: 'Oganessian', birth: '1933' },\r\n  { position: 14, name: 'Johan', surname: 'Gadolin', birth: '1760' },\r\n  { position: 15, name: 'Pierre', surname: 'Curie', birth: '1859' },\r\n];\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","<div class=\"docs-page\">\r\n  <mat-tab-group mat-align-tabs=\"start\">\r\n    <mat-tab label=\"Overview\">\r\n      <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/filter/README.md'\"></markdown>\r\n    </mat-tab>\r\n    <mat-tab label=\"API\">\r\n      <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/filter/API.md'\"></markdown>\r\n    </mat-tab>\r\n    <mat-tab label=\"Examples\">\r\n      <app-example-viewer *ngFor=\"let example of examples\" [exampleType]=\"example\"></app-example-viewer>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n  </div>\r\n","<div class=\"docs-page\">\r\n<mat-tab-group mat-align-tabs=\"start\">\r\n  <mat-tab label=\"Overview\">\r\n    <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/exporter/README.md'\"></markdown>\r\n  </mat-tab>\r\n  <mat-tab label=\"API\">\r\n    <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/exporter/API.md'\"></markdown>\r\n  </mat-tab>\r\n  <mat-tab label=\"Examples\">\r\n    <app-example-viewer *ngFor=\"let example of examples\" [exampleType]=\"example\"></app-example-viewer>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n</div>\r\n","<p>Demonstrates filtering of an Array type column. Enter Size chips for filtering.</p>\r\n\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\" [filterType]=\"filterType\" [dataSource]=\"dataSource\"\r\n  class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"category\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Category\" [(ngModel)]=\"filterEntity.category\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.category}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"brand\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Product Brand\" [(ngModel)]=\"filterEntity.brand\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.brand}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"availableSizes\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n\r\n      <mat-form-field class=\"example-chip-list\">\r\n        <mat-chip-list #chipList aria-label=\"Fruit selection\">\r\n          <mat-chip *ngFor=\"let size of filterEntity.availableSizes\" [selectable]=\"true\" [removable]=\"true\"\r\n            (removed)=\"remove(size)\">\r\n            {{size}}\r\n            <mat-icon matChipRemove>cancel</mat-icon>\r\n          </mat-chip>\r\n          <input placeholder=\"Add Size\" [matChipInputFor]=\"chipList\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"true\"\r\n            (matChipInputTokenEnd)=\"add($event)\">\r\n        </mat-chip-list>\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.availableSizes}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","import { MatTableFilter } from 'mat-table-filter';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\n\r\nexport class Product {\r\n  category: string;\r\n  brand: string;\r\n  availableSizes: Array<string>;\r\n}\r\n\r\nconst PRODUCTS: Product[] = [\r\n  {category: 'T-Shirt', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'T-Shirt', brand: 'Y', availableSizes: ['S', 'L', 'XL']},\r\n  {category: 'T-Shirt', brand: 'Z', availableSizes: ['XL']},\r\n  {category: 'Jean', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'Jean', brand: 'Y', availableSizes: ['S', 'M']},\r\n  {category: 'Jean', brand: 'Z', availableSizes: ['S', 'M', 'L']},\r\n  {category: 'Jean', brand: 'B', availableSizes: ['S', 'M', 'L']},\r\n  {category: 'Jacket', brand: 'X', availableSizes: ['S', 'L', 'XL']},\r\n  {category: 'Jacket', brand: 'Z', availableSizes: ['S']},\r\n  {category: 'Pants', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'Pants', brand: 'Y', availableSizes: ['L', 'XL']},\r\n  {category: 'Pants', brand: 'Z', availableSizes: ['S']},\r\n  {category: 'Hat', brand: 'X', availableSizes: ['S', 'M', 'L']},\r\n  {category: 'Skirt', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'Skirt', brand: 'Y', availableSizes: ['S', 'M', 'L']}\r\n ];\r\n\r\n@Component({\r\n  selector: 'app-array-filter',\r\n  templateUrl: './array-filter.component.html',\r\n  styleUrls: ['./array-filter.component.css']\r\n})\r\n@AddToShowCase('filter', 'array-filter.component', 'Array Filter')\r\nexport class ArrayFilterComponent implements OnInit {\r\n  filterEntity: Product;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['category', 'brand', 'availableSizes'];\r\n  dataSource;\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    // Add our fruit\r\n    if ((value || '').trim()) {\r\n      this.filterEntity.availableSizes.push(value.trim());\r\n    }\r\n\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\r\n\r\n  remove(size: string): void {\r\n    const index = this.filterEntity.availableSizes.indexOf(size);\r\n\r\n    if (index >= 0) {\r\n      this.filterEntity.availableSizes.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filterEntity = new Product();\r\n    this.filterEntity.availableSizes = new Array<string>(); // DO NOT FORGET TO INIT THE ARRAY\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.dataSource = new MatTableDataSource(PRODUCTS);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {}\r\n","<div class=\"docs-example-viewer-wrapper\">\r\n    <div class=\"docs-example-viewer-title\">\r\n      <div class=\"docs-example-viewer-title-spacer\">{{description}}</div>\r\n\r\n      <button mat-icon-button type=\"button\" (click)=\"toggleSource()\"\r\n              [matTooltip]=\"'View source'\">\r\n        <mat-icon>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fit=\"\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\">\r\n            <path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path>\r\n            <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"></path>\r\n          </svg>\r\n        </mat-icon>\r\n      </button>\r\n      <!-- <button mat-icon-button type=\"button\" [matTooltip]=\"'Edit in Stackblitz'\">\r\n        <mat-icon>\r\n          open_in_new\r\n        </mat-icon>\r\n      </button> -->\r\n  </div>\r\n\r\n    <div class=\"docs-example-viewer-source\" *ngIf=\"showSource\">\r\n      <mat-tab-group class=\"docs-source-tabs\">\r\n        <mat-tab label=\"HTML\">\r\n            <markdown [src]=\"htmlDoc\"></markdown>\r\n        </mat-tab>\r\n        <mat-tab label=\"TS\">\r\n            <markdown [src]=\"tsDoc\"></markdown>\r\n        </mat-tab>\r\n        <mat-tab label=\"CSS\">\r\n            <markdown [src]=\"cssDoc\"></markdown>\r\n          </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n    <mat-divider></mat-divider>\r\n    <div class=\"docs-example-viewer-body\">\r\n      <ng-template [cdkPortalOutlet]=\"example\"></ng-template>\r\n    </div>\r\n  </div>\r\n","<p>Briefly demonstrates all exporting functionalities of mat-table-exporter.</p>\r\n\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table matTableExporter [dataSource]=\"dataSource\" #exporter=\"matTableExporter\" [hiddenColumns]=\"[0]\">\r\n\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <mat-header-cell *matHeaderCellDef> Surname </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.surname}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"birth\">\r\n      <mat-header-cell *matHeaderCellDef> Birth </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.birth}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n<div>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('xlsx', {sheet: 'sheet_name', Props: {Author: 'Talha'}, columnWidths: [50, 5, 3]})\">Excel</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('csv')\">Csv</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('json')\">Json</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('txt')\">Txt</button>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\n\r\nexport class Route {\r\n  name: string;\r\n  journeyTime: string;\r\n}\r\n\r\nconst ROUTES: Route[] = [\r\n {name: 'FRA-IST-JFK', journeyTime: '10:00'},\r\n {name: 'MLE-IST-ESB', journeyTime: '10:30'},\r\n {name: 'IST-ESB-GZT', journeyTime: '01:30'},\r\n {name: 'IST-ESB-GZT', journeyTime: '01:30'},\r\n {name: 'JFK-SAW-AYT', journeyTime: '02:45'},\r\n {name: 'JFK-SAW-FRA', journeyTime: '02:45'},\r\n {name: 'JFK-SAW-FRA', journeyTime: '02:45'}\r\n];\r\n\r\n@Component({\r\n  selector: 'app-simple-filter',\r\n  templateUrl: './custom-column-filter.component.html',\r\n  styleUrls: ['./custom-column-filter.component.css']\r\n})\r\n@AddToShowCase('filter', 'custom-column-filter.component', 'Custom Property Predicate')\r\nexport class CustomColumnFilterComponent implements OnInit {\r\n  filterEntity: Route;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['name', 'journeyTime'];\r\n  propertyOptions;\r\n  dataSource;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filterEntity = new Route();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.dataSource = new MatTableDataSource(ROUTES);\r\n    this.propertyOptions = {name: (routeName: string) => { // Custom filtering for name property\r\n      return routeName.split('-')[1] === this.filterEntity.name; // filter for only the station in the middle\r\n    }};\r\n  }\r\n}\r\n","<p>Demonstrates the use of a custom exporter implementation.</p>\r\n\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table matTableExporter [dataSource]=\"dataSource\" [exporter]= \"customExporter\" #exportDirective=\"matTableExporter\" [hiddenColumns]=\"[0]\" >\r\n\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <mat-header-cell *matHeaderCellDef> Surname </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.surname}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"birth\">\r\n      <mat-header-cell *matHeaderCellDef> Birth </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.birth}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n<div>\r\n  <button mat-raised-button (click)=\"exportDirective.exportTable('other')\">Custom Export</button>\r\n</div>\r\n","<p>Demonstrates a custom filtering requirement where only some part of the string needs to be filtered.</p>\r\n<p>Flight Route is filtered according to the custom filtering predicate provided with propertyOptions.</p>\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\" [propertyOptions]=\"propertyOptions\"\r\n[filterType]=\"filterType\" [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Flight Route\" [(ngModel)]=\"filterEntity.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"journeyTime\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      Journey Time\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.journeyTime}} </mat-cell>\r\n  </ng-container>\r\n\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatTableFilter, PropertyOptions } from 'mat-table-filter';\r\n\r\nexport class Captain {\r\n  name: string;\r\n  surname: string;\r\n}\r\n\r\nexport class SpaceCraft {\r\n  name: string;\r\n  isConstitutionClass: boolean;\r\n  captain: Captain;\r\n}\r\n\r\nconst SPACECRAFT_DATA: SpaceCraft[] = [\r\n  {name: 'Endurance', isConstitutionClass: false, captain: {name: 'Joseph', surname: 'Cooper'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Talha', surname: 'TÃ¼re'}},\r\n  {name: 'Discovery', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: false, captain: {name: 'Jean-Luc', surname: 'Pickard'}}\r\n];\r\n\r\n@Component({\r\n  selector: 'app-property-options',\r\n  templateUrl: './property-options.component.html',\r\n  styleUrls: ['./property-options.component.css']\r\n})\r\n@AddToShowCase('filter', 'property-options.component', 'Changing Property Options')\r\nexport class PropertyOptionsComponent implements OnInit {\r\n  filterEntity: SpaceCraft;\r\n  filterType: MatTableFilter;\r\n\r\n  propertyOptions: PropertyOptions;\r\n\r\n  displayedColumns: string[] = ['name', 'captainName', 'captainSurname', 'isConstitutionClass'];\r\n  dataSource;\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Do not forget to initialize your object and it's non-primitive properties\r\n    this.filterEntity = new SpaceCraft();\r\n    this.filterEntity.captain = new Captain();\r\n    this.filterEntity.isConstitutionClass = false; // leaving a filter property undefined means you want all the data without filtering\r\n    this.dataSource = new MatTableDataSource(SPACECRAFT_DATA);\r\n\r\n    // captain.name property filtering needs an exact match with case sensitiveness\r\n    // All other properties will be filtered with ANYWHERE search\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.propertyOptions = {'captain.name': {filterType: MatTableFilter.EQUALS, caseSensitive: true}};\r\n  }\r\n}\r\n","\r\nimport { MatTableFilterModule } from 'mat-table-filter';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n// tslint:disable-next-line:max-line-length\r\n\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatTableExporterModule } from 'mat-table-exporter';\r\nimport { ExporterComponent } from './components/exporter/exporter.component';\r\nimport { FilterComponent } from './components/filter/filter.component';\r\nimport { MarkdownModule, MarkedOptions } from 'ngx-markdown';\r\nimport { AppComponent } from './app.component';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ExampleViewerComponent } from './components/example-viewer/example-viewer.component';\r\nimport { SimpleFilterComponent } from './components/examples/simple-filter/simple-filter.component';\r\nimport { CustomColumnFilterComponent } from './components/examples/custom-column-filter/custom-column-filter.component';\r\nimport { ArrayFilterComponent } from './components/examples/array-filter/array-filter.component';\r\nimport { PropertyOptionsComponent } from './components/examples/property-options/property-options.component';\r\nimport { BriefExporterComponent } from './components/examples/brief-exporter/brief-exporter.component';\r\nimport { CustomExporterComponent } from './components/examples/custom-exporter/custom-exporter.component';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { SelectionExporterComponent } from './components/examples/selection-exporter/selection-exporter.component';\r\n\r\nexport function markedOptions(): MarkedOptions {\r\n\r\n  return {\r\n    gfm: true,\r\n    breaks: false,\r\n    pedantic: false,\r\n    smartLists: true,\r\n    smartypants: false,\r\n  };\r\n}\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ExporterComponent,\r\n    FilterComponent,\r\n    ExampleViewerComponent,\r\n    ArrayFilterComponent,\r\n    CustomColumnFilterComponent,\r\n    SimpleFilterComponent,\r\n    PropertyOptionsComponent,\r\n    BriefExporterComponent,\r\n    CustomExporterComponent,\r\n    SelectionExporterComponent\r\n  ],\r\n  imports: [\r\n    HttpClientModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    PortalModule,\r\n    MarkdownModule.forRoot({\r\n      loader: HttpClient,\r\n      markedOptions: {\r\n        provide: MarkedOptions,\r\n        useFactory: markedOptions,\r\n      },\r\n    }),\r\n    BrowserAnimationsModule,\r\n    MatTableFilterModule,\r\n    MatTableExporterModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatTooltipModule,\r\n    MatSlideToggleModule,\r\n    MatCheckboxModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [\r\n    ArrayFilterComponent,\r\n    BriefExporterComponent,\r\n    CustomColumnFilterComponent,\r\n    CustomExporterComponent,\r\n    SimpleFilterComponent,\r\n    PropertyOptionsComponent,\r\n    SelectionExporterComponent\r\n\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\n\r\nexport class Captain {\r\n  name: string;\r\n  surname: string;\r\n}\r\n\r\nexport class SpaceCraft {\r\n  name: string;\r\n  isConstitutionClass: boolean;\r\n  captain: Captain;\r\n}\r\n\r\nconst SPACECRAFT_DATA: SpaceCraft[] = [\r\n  {name: 'Endurance', isConstitutionClass: false, captain: {name: 'Joseph', surname: 'Cooper'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Talha', surname: 'TÃ¼re'}},\r\n  {name: 'Discovery', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: false, captain: {name: 'Jean-Luc', surname: 'Pickard'}},\r\n  {name: null, isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Discovery', isConstitutionClass: true, captain: null}\r\n];\r\n\r\n@Component({\r\n  selector: 'app-simple-filter',\r\n  templateUrl: './simple-filter.component.html',\r\n  styleUrls: ['./simple-filter.component.css']\r\n})\r\n@AddToShowCase('filter', 'simple-filter.component', 'Simple Filter')\r\nexport class SimpleFilterComponent implements OnInit {\r\n  filterEntity: SpaceCraft;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['name', 'captainName', 'captainSurname', 'isConstitutionClass'];\r\n  dataSource;\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Do not forget to initialize your object and it's non-primitive properties\r\n    this.filterEntity = new SpaceCraft();\r\n    this.filterEntity.captain = new Captain();\r\n    this.filterEntity.isConstitutionClass = false; // leaving a filter property undefined means you want all the data without filtering\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.dataSource = new MatTableDataSource(SPACECRAFT_DATA);\r\n  }\r\n}\r\n","import { SelectionModel } from '@angular/cdk/collections';\r\nimport { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableExporterDirective } from 'mat-table-exporter';\r\n\r\n@Component({\r\n  selector: 'app-selection-exporter',\r\n  templateUrl: './selection-exporter.component.html',\r\n  styleUrls: ['./selection-exporter.component.css']\r\n})\r\n@AddToShowCase('exporter', 'selection-exporter.component', 'Selected Row Exporting Example')\r\nexport class SelectionExporterComponent implements AfterViewInit, OnInit {\r\n  title = 'mte-test';\r\n  displayedColumns = ['select', 'position', 'name', 'surname', 'birth'];\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatTableExporterDirective, { static: false }) exporter: MatTableExporterDirective;\r\n  dataSource: MatTableDataSource<Element>;\r\n  selection = new SelectionModel<Element>(true, []);\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  private isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  toggleRow(row: any, index: number) {\r\n    this.selection.toggle(row);\r\n    this.exporter.toggleRow(index);\r\n  }\r\n\r\n  /** The label for the checkbox on the passed row */\r\n  checkboxLabel(row?: Element): string {\r\n    if (!row) {\r\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\r\n    }\r\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\r\n  }\r\n}\r\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  surname: string;\r\n  birth: string;\r\n}\r\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  { position: 1, name: 'Albert', surname: 'Einstein', birth: '1879' },\r\n  { position: 2, name: 'Marie', surname: 'Curie', birth: '1867' },\r\n  { position: 3, name: 'Enrico', surname: 'Fermi', birth: '1901' },\r\n  { position: 4, name: 'Dmitri', surname: 'Mendeleev', birth: '1834' },\r\n  { position: 5, name: 'Alfred', surname: 'Nobel', birth: '1833' },\r\n  { position: 6, name: 'Ernest', surname: 'Lawrence', birth: '1901' },\r\n  { position: 7, name: 'Glenn', surname: 'Seaborg', birth: '1912' },\r\n  { position: 8, name: 'Niels', surname: 'Bohr', birth: '1885' },\r\n  { position: 9, name: 'Lise', surname: 'Meitner', birth: '1878' },\r\n  { position: 10, name: 'Wilhelm', surname: 'RÃ¶ntgen', birth: '1845' },\r\n  { position: 11, name: 'Nicolaus', surname: 'Copernicus', birth: '1473' },\r\n  { position: 12, name: 'Georgy', surname: 'Flyorov', birth: '1913' },\r\n  { position: 13, name: 'Yuri', surname: 'Oganessian', birth: '1933' },\r\n  { position: 14, name: 'Johan', surname: 'Gadolin', birth: '1760' },\r\n  { position: 15, name: 'Pierre', surname: 'Curie', birth: '1859' },\r\n];\r\n\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\r\n\r\n@Component({\r\n  selector: 'app-example-viewer',\r\n  templateUrl: './example-viewer.component.html',\r\n  styleUrls: ['./example-viewer.component.css']\r\n})\r\nexport class ExampleViewerComponent {\r\n\r\n  private static readonly ASSETS_ROOT: string = './assets/';\r\n  private static readonly SOURCES_PATH: string = 'example-sources/';\r\n\r\n  example: ComponentPortal<any>;\r\n  private fileName: string;\r\n  description: string;\r\n  stackBlitzLink: string;\r\n  @Input()\r\n  set exampleType(type: ComponentType<any>) {\r\n    this.example = new ComponentPortal(type);\r\n    this.fileName = type.prototype.fileName;\r\n    this.description = type.prototype.description;\r\n    // this.stackBlitzLink = type.prototype.stackBlitzLink;\r\n    this.htmlDoc = this.resolveFilePath('.html'); // Will be replaced with a more convinient webpack/bazel solution\r\n    this.tsDoc =  this.resolveFilePath('.js');\r\n    this.cssDoc =  this.resolveFilePath('.css');\r\n  }\r\n\r\n  showSource: boolean;\r\n  htmlDoc: string;\r\n  tsDoc: string;\r\n  cssDoc: string;\r\n\r\n  constructor() { }\r\n\r\n  toggleSource() {\r\n    this.showSource = !this.showSource;\r\n  }\r\n\r\n  private resolveFilePath(extension: string): string {\r\n    return ExampleViewerComponent.ASSETS_ROOT + ExampleViewerComponent.SOURCES_PATH +\r\n    this.fileName.replace('.component', '/') +\r\n    this.fileName + extension;\r\n  }\r\n\r\n}\r\n","import { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule, ÉµÉµdefineInjectable, Injectable, ÉµÉµinject, INJECTOR, Injector, EventEmitter, Directive, Renderer2, Input, Output } from '@angular/core';\nimport { utils, write } from 'xlsx/dist/xlsx.mini.min';\nimport { saveAs } from 'file-saver-es';\n\nclass CdkTableExporterModule {\r\n}\r\nCdkTableExporterModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [],\r\n                imports: [\r\n                    CdkTableModule\r\n                ],\r\n                exports: []\r\n            },] }\r\n];\n\nvar ExportType;\r\n(function (ExportType) {\r\n    ExportType[\"XLS\"] = \"xls\";\r\n    ExportType[\"XLSX\"] = \"xlsx\";\r\n    ExportType[\"CSV\"] = \"csv\";\r\n    ExportType[\"TXT\"] = \"txt\";\r\n    ExportType[\"JSON\"] = \"json\";\r\n    ExportType[\"OTHER\"] = \"other\";\r\n})(ExportType || (ExportType = {}));\n\nclass DataExtractorService {\r\n    constructor() { }\r\n    extractRows(cdkTable, hiddenColumns, outlet) {\r\n        return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet !== null && outlet !== void 0 ? outlet : cdkTable._rowOutlet);\r\n    }\r\n    getRowsAsJsonArray(cdkTable, hiddenColumns, outlet) {\r\n        const renderedRows = this.getRenderedRows(cdkTable, outlet);\r\n        return this.convertToJsonArray(hiddenColumns, renderedRows);\r\n    }\r\n    getRenderedRows(cdkTable, outlet) {\r\n        return cdkTable._getRenderedRows(outlet);\r\n    }\r\n    convertToJsonArray(hiddenColumns, rows) {\r\n        const result = new Array();\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = this.convertRow(hiddenColumns, rows[i]);\r\n            result.push(this.createExcelItem(row));\r\n        }\r\n        return result;\r\n    }\r\n    convertRow(hiddenColumns, row) {\r\n        const result = new Array();\r\n        const cells = row.children;\r\n        for (let i = 0; i < cells.length; i++) {\r\n            if (!this.shouldHide(hiddenColumns, i)) {\r\n                const element = (cells.item(i).innerText).trim();\r\n                result.push(element);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    shouldHide(hiddenColumns, columnIndex) {\r\n        if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    createExcelItem(row) {\r\n        return Object.assign({}, row);\r\n    }\r\n}\r\nDataExtractorService.Éµprov = ÉµÉµdefineInjectable({ factory: function DataExtractorService_Factory() { return new DataExtractorService(); }, token: DataExtractorService, providedIn: \"root\" });\r\nDataExtractorService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nDataExtractorService.ctorParameters = () => [];\n\nclass Mime {\r\n    constructor(extension, contentTypeHeader) {\r\n        this.extension = extension;\r\n        this.contentTypeHeader = contentTypeHeader;\r\n    }\r\n}\n\nconst MAT_TABLE_EXPORTER = 'mat-table-exporter';\r\nconst TYPE_ARRAY = 'array';\r\nconst CHAR_SET_UTF = ';charset=utf-';\r\nconst CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\r\nconst CONTENT_TYPE_TEXT = ExportType.TXT + '/';\r\nconst CONTENT_TYPE_APPLICATION = 'application/';\r\nconst CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\r\nconst DOT = '.';\r\nconst COMMA = ',';\r\nconst EXTENSION_XLS = DOT + ExportType.XLS;\r\nconst EXTENSION_XLSX = DOT + ExportType.XLSX;\r\nconst EXTENSION_CSV = DOT + ExportType.CSV;\r\nconst EXTENSION_JSON = DOT + ExportType.JSON;\r\nconst EXTENSION_TEXT = DOT + ExportType.TXT;\r\nconst MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nconst MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nconst MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\r\nconst MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\r\nconst MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\r\nconst REF = '!ref';\r\nconst XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\r\nconst RETURN = '\\n';\r\nconst TAB = '\\t';\r\nconst XLSX_COLS = '!cols';\r\nconst BOM = '\\uFEFF';\n\nclass FileUtil {\r\n    static save(content, mime, options) {\r\n        const blob = new Blob([content], { type: mime.contentTypeHeader });\r\n        let fileName = MAT_TABLE_EXPORTER;\r\n        if (options && options.fileName) {\r\n            fileName = options.fileName;\r\n        }\r\n        saveAs(blob, fileName + mime.extension);\r\n    }\r\n    static isXls(fileName) {\r\n        return fileName.toLowerCase().match(XLS_REGEX) != null;\r\n    }\r\n    static identifyExportType(fileName) {\r\n        if (fileName && FileUtil.isXls(fileName)) {\r\n            return ExportType.XLS;\r\n        }\r\n        else {\r\n            return ExportType.XLSX;\r\n        }\r\n    }\r\n    static removeExtension(options) {\r\n        options.fileName = options.fileName.split(DOT)[0];\r\n    }\r\n}\n\nclass FileExporter {\r\n    constructor() { }\r\n    export(rows, options) {\r\n        if (!rows) {\r\n            throw new Error('Empty json array is provided, rows parameter is mandatory!');\r\n        }\r\n        const content = this.createContent(rows, options);\r\n        const mimeType = this.getMimeType();\r\n        FileUtil.save(content, mimeType, options);\r\n    }\r\n}\n\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\r\nclass WorksheetExporter extends FileExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    createContent(rows, options) {\r\n        const workSheet = utils.json_to_sheet(rows, {\r\n            skipHeader: true // we don't want to see object properties as our headers\r\n        });\r\n        return this.workSheetToContent(workSheet, options);\r\n    }\r\n}\n\nclass CsvExporterService extends WorksheetExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    workSheetToContent(worksheet, options) {\r\n        var _a;\r\n        return BOM + utils.sheet_to_csv(worksheet, { FS: (_a = options === null || options === void 0 ? void 0 : options.delimiter) !== null && _a !== void 0 ? _a : COMMA });\r\n    }\r\n    getMimeType() {\r\n        return MIME_CSV;\r\n    }\r\n}\r\nCsvExporterService.Éµprov = ÉµÉµdefineInjectable({ factory: function CsvExporterService_Factory() { return new CsvExporterService(); }, token: CsvExporterService, providedIn: \"root\" });\r\nCsvExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nCsvExporterService.ctorParameters = () => [];\n\nclass TxtExporterService extends FileExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    createContent(rows, options) {\r\n        let content = '';\r\n        rows.forEach(element => {\r\n            content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\r\n        });\r\n        return content;\r\n    }\r\n    getMimeType() {\r\n        return MIME_TXT;\r\n    }\r\n    getDelimiter(options) {\r\n        if (options && options.delimiter) {\r\n            return options.delimiter;\r\n        }\r\n        else {\r\n            return TAB;\r\n        }\r\n    }\r\n}\r\nTxtExporterService.Éµprov = ÉµÉµdefineInjectable({ factory: function TxtExporterService_Factory() { return new TxtExporterService(); }, token: TxtExporterService, providedIn: \"root\" });\r\nTxtExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nTxtExporterService.ctorParameters = () => [];\n\nclass XlsExporterService extends WorksheetExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    workSheetToContent(worksheet, options = {}) {\r\n        const workBook = utils.book_new();\r\n        if (options.columnWidths) {\r\n            worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\r\n        }\r\n        this.correctTypes(options);\r\n        utils.book_append_sheet(workBook, worksheet, options.sheet);\r\n        return write(workBook, options);\r\n    }\r\n    getMimeType() {\r\n        return MIME_EXCEL_XLS;\r\n    }\r\n    correctTypes(options) {\r\n        if (!options.type) {\r\n            options.type = TYPE_ARRAY;\r\n        }\r\n        options.bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\r\n    }\r\n    convertToWch(columnWidths) {\r\n        return columnWidths.map(width => ({ wch: width }));\r\n    }\r\n}\r\nXlsExporterService.Éµprov = ÉµÉµdefineInjectable({ factory: function XlsExporterService_Factory() { return new XlsExporterService(); }, token: XlsExporterService, providedIn: \"root\" });\r\nXlsExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nXlsExporterService.ctorParameters = () => [];\n\nclass JsonExporterService extends FileExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    createContent(rows, options) {\r\n        return JSON.stringify(rows);\r\n    }\r\n    getMimeType() {\r\n        return MIME_JSON;\r\n    }\r\n}\r\nJsonExporterService.Éµprov = ÉµÉµdefineInjectable({ factory: function JsonExporterService_Factory() { return new JsonExporterService(); }, token: JsonExporterService, providedIn: \"root\" });\r\nJsonExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nJsonExporterService.ctorParameters = () => [];\n\nclass XlsxExporterService extends XlsExporterService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    // override\r\n    getMimeType() {\r\n        return MIME_EXCEL_XLSX;\r\n    }\r\n}\r\nXlsxExporterService.Éµprov = ÉµÉµdefineInjectable({ factory: function XlsxExporterService_Factory() { return new XlsxExporterService(); }, token: XlsxExporterService, providedIn: \"root\" });\r\nXlsxExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nXlsxExporterService.ctorParameters = () => [];\n\nclass ServiceLocatorService {\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    getService(exportType) {\r\n        switch (exportType) {\r\n            case ExportType.XLS.valueOf():\r\n                return this.injector.get(XlsExporterService);\r\n            case ExportType.XLSX.valueOf():\r\n                return this.injector.get(XlsxExporterService);\r\n            case ExportType.JSON.valueOf():\r\n                return this.injector.get(JsonExporterService);\r\n            case ExportType.TXT.valueOf():\r\n                return this.injector.get(TxtExporterService);\r\n            case ExportType.CSV.valueOf():\r\n                return this.injector.get(CsvExporterService);\r\n            case ExportType.OTHER.valueOf():\r\n                return null;\r\n            default:\r\n                return this.injector.get(XlsxExporterService);\r\n        }\r\n    }\r\n}\r\nServiceLocatorService.Éµprov = ÉµÉµdefineInjectable({ factory: function ServiceLocatorService_Factory() { return new ServiceLocatorService(ÉµÉµinject(INJECTOR)); }, token: ServiceLocatorService, providedIn: \"root\" });\r\nServiceLocatorService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nServiceLocatorService.ctorParameters = () => [\r\n    { type: Injector }\r\n];\n\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\nclass CdkTableExporter {\r\n    constructor(renderer, serviceLocator, dataExtractor, _cdkTable) {\r\n        this.renderer = renderer;\r\n        this.serviceLocator = serviceLocator;\r\n        this.dataExtractor = dataExtractor;\r\n        this._cdkTable = _cdkTable;\r\n        this.exportCompleted = new EventEmitter();\r\n        this.exportStarted = new EventEmitter();\r\n    }\r\n    /**\r\n     * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n     */\r\n    exportTable(exportType, options) {\r\n        this.loadExporter(exportType);\r\n        this._options = options;\r\n        this.exportStarted.emit();\r\n        this._isIterating = true;\r\n        this._isExporting = true;\r\n        this._data = new Array();\r\n        this.extractTableHeader();\r\n        try {\r\n            this.exportWithPagination();\r\n        }\r\n        catch (notPaginated) {\r\n            this.exportSinglePage();\r\n        }\r\n    }\r\n    toggleRow(index) {\r\n        const paginatedRowIndex = this.getPaginatedRowIndex(index);\r\n        if (this.isToggleOn(paginatedRowIndex)) {\r\n            this.toggleOff(paginatedRowIndex);\r\n        }\r\n        else {\r\n            this.toggleOn(paginatedRowIndex);\r\n        }\r\n    }\r\n    /**\r\n     * This event will clear rows selection done using toggleRow functionality\r\n     */\r\n    resetToggleRows() {\r\n        this._selectedRows = [];\r\n    }\r\n    toggleOn(index) {\r\n        this._selectedRows = [...(this._selectedRows || []), index];\r\n    }\r\n    toggleOff(index) {\r\n        this._selectedRows = this._selectedRows.filter(x => x !== index);\r\n    }\r\n    isToggleOn(index) {\r\n        var _a;\r\n        return (_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.includes(index);\r\n    }\r\n    loadExporter(exportType) {\r\n        if (exportType === ExportType.OTHER.valueOf()) {\r\n            this._exporterService = this.exporter;\r\n        }\r\n        else {\r\n            this._exporterService = this.serviceLocator.getService(exportType);\r\n        }\r\n    }\r\n    exportWithPagination() {\r\n        this._initialPageIndex = this.getCurrentPageIndex();\r\n        this.initPageHandler();\r\n        this.goToPage(0);\r\n    }\r\n    exportSinglePage() {\r\n        this.extractDataOnCurrentPage();\r\n        this.extractTableFooter();\r\n        this.exportExtractedData();\r\n    }\r\n    extractDataOnCurrentPage() {\r\n        const rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\r\n        this._data = this._data.concat(this.getSelectedRows(rows));\r\n    }\r\n    getSelectedRows(rows) {\r\n        if (this.isSelectiveExport()) {\r\n            return rows.filter((_, i) => this._selectedRows.includes(this.getPaginatedRowIndex(i)));\r\n        }\r\n        else {\r\n            return rows;\r\n        }\r\n    }\r\n    isSelectiveExport() {\r\n        return this._selectedRows && !this.isMasterToggleOff() && !this.isMasterToggleOn();\r\n    }\r\n    isMasterToggleOn() {\r\n        return this.compareSelectedRowCount(this.getTotalItemsCount());\r\n    }\r\n    isMasterToggleOff() {\r\n        return this.compareSelectedRowCount(0);\r\n    }\r\n    compareSelectedRowCount(rowCount) {\r\n        var _a;\r\n        return !!(((_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.length) === rowCount);\r\n    }\r\n    initPageHandler() {\r\n        if (!this._subscription) {\r\n            this._subscription = this.getPageChangeObservable().subscribe(() => {\r\n                setTimeout(() => {\r\n                    if (this._isIterating) {\r\n                        this.extractDataOnCurrentPage();\r\n                        if (this.hasNextPage()) {\r\n                            this.nextPage();\r\n                        }\r\n                        else {\r\n                            this._isIterating = false;\r\n                            this.goToPage(this._initialPageIndex);\r\n                        }\r\n                    }\r\n                    else if (this._isExporting) {\r\n                        this._isExporting = false;\r\n                        this.extractTableFooter();\r\n                        this.exportExtractedData();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    exportExtractedData() {\r\n        this._exporterService.export(this._data, this._options);\r\n        this._data = new Array();\r\n        this.exportCompleted.emit();\r\n    }\r\n    extractSpecialRows(outlet) {\r\n        this._data.push(...this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet));\r\n    }\r\n    extractTableHeader() {\r\n        this.extractSpecialRows(this._cdkTable._headerRowOutlet);\r\n    }\r\n    extractTableFooter() {\r\n        this.extractSpecialRows(this._cdkTable._footerRowOutlet);\r\n    }\r\n    hasNextPage() {\r\n        if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    nextPage() {\r\n        this.goToPage(this.getCurrentPageIndex() + 1);\r\n    }\r\n    getPaginatedRowIndex(index) {\r\n        return index + (this.getPageSize() * this.getCurrentPageIndex());\r\n    }\r\n}\r\nCdkTableExporter.decorators = [\r\n    { type: Directive }\r\n];\r\nCdkTableExporter.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: ServiceLocatorService },\r\n    { type: DataExtractorService },\r\n    { type: undefined }\r\n];\r\nCdkTableExporter.propDecorators = {\r\n    hiddenColumns: [{ type: Input }],\r\n    exporter: [{ type: Input }],\r\n    exportCompleted: [{ type: Output }],\r\n    exportStarted: [{ type: Output }]\r\n};\n\n/*\r\n * Public API Surface of cdk-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BOM, CHAR_SET_UTF, CHAR_SET_UTF_8, COMMA, CONTENT_TYPE_APPLICATION, CONTENT_TYPE_EXCEL, CONTENT_TYPE_TEXT, CdkTableExporter, CdkTableExporterModule, CsvExporterService, DOT, DataExtractorService, EXTENSION_CSV, EXTENSION_JSON, EXTENSION_TEXT, EXTENSION_XLS, EXTENSION_XLSX, ExportType, FileExporter, FileUtil, JsonExporterService, MAT_TABLE_EXPORTER, MIME_CSV, MIME_EXCEL_XLS, MIME_EXCEL_XLSX, MIME_JSON, MIME_TXT, Mime, REF, RETURN, ServiceLocatorService, TAB, TYPE_ARRAY, TxtExporterService, WorksheetExporter, XLSX_COLS, XLS_REGEX, XlsExporterService, XlsxExporterService };\n//# sourceMappingURL=cdk-table-exporter.js.map\n","\r\nimport { BaseComponent } from './../base-component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { showCaseExamples } from '../add-to-showcase';\r\n\r\n@Component({\r\n  selector: 'app-exporter',\r\n  templateUrl: './exporter.component.html',\r\n  styleUrls: ['./exporter.component.css']\r\n})\r\nexport class ExporterComponent extends BaseComponent implements OnInit {\r\n\r\n  ngOnInit() {\r\n    this.examples = showCaseExamples.get('exporter');\r\n  }\r\n\r\n}\r\n","<p>Briefly demonstrates the basic usage of mat-table-filter.</p>\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\"\r\n[filterType]=\"filterType\" [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainName\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Name\" [(ngModel)]=\"filterEntity.captain.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain?.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainSurname\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Surname\" [(ngModel)]=\"filterEntity.captain.surname\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain?.surname}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"isConstitutionClass\">\r\n      <mat-header-cell *matHeaderCellDef>\r\n          <mat-slide-toggle\r\n          class=\"constitution-padding\"\r\n          [(ngModel)]=\"filterEntity.isConstitutionClass\">\r\n        Constitution Class\r\n      </mat-slide-toggle>\r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.isConstitutionClass}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","export const showCaseExamples: Map<string, Array<any>> = new Map();\r\n\r\nexport function AddToShowCase(categoryName: string, fileName: string, description: string) {\r\n  return (type: any) => {\r\n    type.prototype.fileName = fileName;\r\n    type.prototype.description = description;\r\n    const categoryArray = showCaseExamples.get(categoryName);\r\n    if (!categoryArray) {\r\n      const examples = new Array<any>();\r\n      examples.push(type);\r\n      showCaseExamples.set(categoryName, examples);\r\n    } else {\r\n      categoryArray.push(type);\r\n    }\r\n    return type;\r\n  };\r\n}\r\n","export class BaseComponent {\r\n\r\n  examples;\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","<p>Demonstrates how to handle filtering for specific properties of table items.</p>\r\n<p>In this example the table lists space-crafts. A space-craft has a captain. A captain has some properties.\r\n  Filtering for captain's name is done with an exact match. The rest of the properties are filtered with ANYWHERE filter type.\r\n</p>\r\n\r\n<!-- Filtering properties for captain.name are set to be an exact match by using propertyOptions binding-->\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\" [propertyOptions]=\"propertyOptions\"\r\n[filterType]=\"filterType\" [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainName\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Name\" [(ngModel)]=\"filterEntity.captain.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainSurname\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Surname\" [(ngModel)]=\"filterEntity.captain.surname\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain.surname}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"isConstitutionClass\">\r\n      <mat-header-cell *matHeaderCellDef>\r\n          <mat-slide-toggle\r\n          class=\"constitution-padding\"\r\n          [(ngModel)]=\"filterEntity.isConstitutionClass\">\r\n        Constitution Class\r\n      </mat-slide-toggle>\r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.isConstitutionClass}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","<header class=\"docs-header-background\">\r\n  <div class=\"docs-header-section\">\r\n      <a class=\"docs-header-container\" href=\"https://github.com/HalitTalha/mat-table-extensions\" target=\"_blank\">\r\n        <img class=\"docs-header-logo\" src=\"assets/logos/github.png\">\r\n        <a class=\"docs-header-headline\">/HalitTalha</a>\r\n        </a>\r\n    <div class=\"docs-header-headline\">\r\n      <h1 class=\"mat-h1\">ng-material-extensions</h1>\r\n      <h2> Extended features for Angular Material Components</h2>\r\n    </div>\r\n  </div>\r\n</header>\r\n  <mat-tab-group class=\"docs-tabs\" mat-align-tabs=\"center\">\r\n      <mat-tab label=\"mat-table-exporter\">\r\n        <app-exporter></app-exporter>\r\n      </mat-tab>\r\n      <mat-tab label=\"mat-table-filter\">\r\n        <app-filter></app-filter>\r\n      </mat-tab>\r\n  </mat-tab-group>\r\n<footer class=\"docs-footer\">\r\n  <div class=\"docs-footer-list\">\r\n    <div class=\"docs-footer-logo\">\r\n      <div class=\"footer-logo\">\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n","<p>Demonstrates how to export selected rows. Having no row selected means to export all.</p>\r\n\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table matTableExporter [dataSource]=\"dataSource\" #exporter=\"matTableExporter\" [hiddenColumns]=\"[0]\">\r\n\r\n  <!-- Checkbox Column -->\r\n  <ng-container matColumnDef=\"select\">\r\n    <th mat-header-cell *matHeaderCellDef>\r\n      Select\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let row; let i = index\">\r\n      <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                    (change)=\"$event ? toggleRow(row, i) : null\"\r\n                    [checked]=\"selection.isSelected(row)\"\r\n                    [aria-label]=\"checkboxLabel(row)\">\r\n      </mat-checkbox>\r\n    </td>\r\n  </ng-container>\r\n\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <mat-header-cell *matHeaderCellDef> Surname </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.surname}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"birth\">\r\n      <mat-header-cell *matHeaderCellDef> Birth </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.birth}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n<div>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('xlsx', {sheet: 'sheet_name', Props: {Author: 'Talha'}, columnWidths: [50, 5, 3]})\">Excel</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('csv')\">Csv</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('json')\">Json</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('txt')\">Txt</button>\r\n</div>\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}