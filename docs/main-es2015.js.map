{"version":3,"sources":["./dist/mat-table-exporter/fesm2015/mat-table-exporter.js","./src/app/components/filter/filter.component.ts","./src/app/components/examples/custom-exporter/custom-exporter.component.ts","fs (ignored)","./dist/mat-table-filter/fesm2015/mat-table-filter.js","./src/app/components/examples/brief-exporter/brief-exporter.component.ts","./src/environments/environment.ts","./src/app/components/filter/filter.component.html","./src/app/components/exporter/exporter.component.html","./src/app/components/examples/array-filter/array-filter.component.html","./src/app/components/examples/array-filter/array-filter.component.ts","./src/app/app.component.ts","./src/app/components/example-viewer/example-viewer.component.html","./src/app/components/examples/brief-exporter/brief-exporter.component.html","./src/app/components/examples/custom-column-filter/custom-column-filter.component.ts","./src/app/components/examples/custom-exporter/custom-exporter.component.html","./src/app/components/examples/custom-column-filter/custom-column-filter.component.html","./src/app/components/examples/property-options/property-options.component.ts","./src/app/app.module.ts","./src/app/components/examples/simple-filter/simple-filter.component.ts","./src/app/components/examples/selection-exporter/selection-exporter.component.ts","./src/app/components/example-viewer/example-viewer.component.ts","./dist/cdk-table-exporter/fesm2015/cdk-table-exporter.js","./src/app/components/exporter/exporter.component.ts","./src/app/components/examples/simple-filter/simple-filter.component.html","./src/app/components/add-to-showcase.ts","./src/app/components/base-component.ts","./src/app/components/examples/property-options/property-options.component.html","./src/app/app.component.html","./src/app/components/examples/selection-exporter/selection-exporter.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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I;AACF;AACF;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oEAAU,CAAC,iEAAO,WAAW,iEAAO;AACpD;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAkB,EAAE,oDAAoD,oCAAoC,EAAE,oDAAoD;AAChM;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wEAAkB,EAAE,2DAA2D,2CAA2C,EAAE,2DAA2D;AAC5N;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mEAAS;AAC1C,gBAAgB,+DAAK,kBAAkB,gEAAK,eAAe,0DAAO;AAClE;AACA;AACA;AACA;AACA;AACA,kCAAkC,mEAAS;AAC3C;AACA;AACA,oBAAoB,qEAAU,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,kEAAO;AACpC,2CAA2C;AAC3C;AACA;AACA;AACA;AACA,6BAA6B,oEAAS;AACtC;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,+BAA+B;AACzE;AACA;AACA;AACA;AACA,QAAQ,4DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6DAAK;AAC/B;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6DAAK,0BAA0B,wHAAwH;AAC5K;AACA;AACA;AACA;AACA;AACA,2BAA2B,wEAAkB,EAAE,iDAAiD,iCAAiC,EAAE,iDAAiD;AACpL;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wEAAkB,EAAE,iDAAiD,iCAAiC,EAAE,iDAAiD;AACpL;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,yBAAyB,6DAAK;AAC9B;AACA;AACA;AACA;AACA,QAAQ,6DAAK;AACb,eAAe,qEAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA,2BAA2B,wEAAkB,EAAE,iDAAiD,iCAAiC,EAAE,iDAAiD;AACpL;AACA,KAAK,OAAO,wDAAU;AACtB;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wEAAkB,EAAE,kDAAkD,kCAAkC,EAAE,kDAAkD;AACxL;AACA,KAAK,OAAO,wD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","file":"main-es2015.js","sourcesContent":["import { CdkTableExporter, ServiceLocatorService, DataExtractorService, CdkTableExporterModule } from 'cdk-table-exporter';\nexport * from 'cdk-table-exporter';\nimport { MatTable, MatTableModule } from '@angular/material/table';\nimport { Directive, Renderer2, Host, Self, Optional, NgModule } from '@angular/core';\n\nclass MatTableExporterDirective extends CdkTableExporter {\r\n    constructor(renderer, serviceLocator, dataExtractor, table) {\r\n        super(renderer, serviceLocator, dataExtractor, table);\r\n    }\r\n    /**\r\n     * Overriding ngAfterViewInit of TableExporter\r\n     */\r\n    ngAfterViewInit() {\r\n        this.exportStarted.subscribe(_ => {\r\n            this.enablePaginator(false);\r\n        });\r\n        this.exportCompleted.subscribe(_ => {\r\n            this.enablePaginator(true);\r\n        });\r\n    }\r\n    /**\r\n     * MatTable implementation of getPageCount\r\n     */\r\n    getPageCount() {\r\n        return this.getPaginator().getNumberOfPages();\r\n    }\r\n    /**\r\n     * MatTable implementation of getPageSize\r\n     */\r\n    getPageSize() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.pageSize) !== null && _b !== void 0 ? _b : 0;\r\n    }\r\n    /**\r\n     * MatTable implementation of getCurrentPageIndex\r\n     */\r\n    getCurrentPageIndex() {\r\n        var _a, _b;\r\n        return (_b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.pageIndex) !== null && _b !== void 0 ? _b : 0;\r\n    }\r\n    /**\r\n     * MatTable implementation of getTotalItemsCount\r\n     */\r\n    getTotalItemsCount() {\r\n        var _a, _b, _c, _d, _e;\r\n        return (_e = (_b = (_a = this.getPaginator()) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : (_d = (_c = this.getDataSource()) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0;\r\n    }\r\n    /**\r\n     * MatTable implementation of goToPage\r\n     */\r\n    goToPage(index) {\r\n        this.getPaginator().pageIndex = index;\r\n        this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n    }\r\n    /**\r\n     * MatTable implementation of getPageChangeObservable\r\n     */\r\n    getPageChangeObservable() {\r\n        return this.getPaginator().page;\r\n    }\r\n    getDataSource() {\r\n        return this._cdkTable.dataSource;\r\n    }\r\n    getPaginator() {\r\n        return this.getDataSource().paginator;\r\n    }\r\n    enablePaginator(value) {\r\n        if (this.getPaginator()) {\r\n            this.getPaginator().disabled = !value;\r\n            this.getPaginator()._changePageSize(this.getPaginator().pageSize);\r\n        }\r\n    }\r\n}\r\nMatTableExporterDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTableExporter]',\r\n                exportAs: 'matTableExporter'\r\n            },] }\r\n];\r\nMatTableExporterDirective.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: ServiceLocatorService },\r\n    { type: DataExtractorService },\r\n    { type: MatTable, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }\r\n];\n\nclass MatTableExporterModule {\r\n}\r\nMatTableExporterModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [MatTableExporterDirective],\r\n                imports: [\r\n                    MatTableModule,\r\n                    CdkTableExporterModule\r\n                ],\r\n                exports: [MatTableExporterDirective]\r\n            },] }\r\n];\n\n/*\r\n * Public API Surface of mat-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MatTableExporterDirective, MatTableExporterModule };\n//# sourceMappingURL=mat-table-exporter.js.map\n","import { showCaseExamples } from './../add-to-showcase';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { BaseComponent } from '../base-component';\r\n\r\n@Component({\r\n  selector: 'app-filter',\r\n  templateUrl: './filter.component.html',\r\n  styleUrls: ['./filter.component.css']\r\n})\r\nexport class FilterComponent extends BaseComponent implements OnInit {\r\n\r\n  ngOnInit() {\r\n    this.examples = showCaseExamples.get('filter');\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { Exporter, Options } from 'mat-table-exporter';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\n\r\nexport class CustomExporter implements Exporter<Options> {\r\n  export(rows: Array<any>, options?: Options) {\r\n    console.log(rows);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-custom-exporter',\r\n  templateUrl: './custom-exporter.component.html',\r\n  styleUrls: ['./custom-exporter.component.css']\r\n})\r\n@AddToShowCase('exporter', 'custom-exporter.component', 'Custom Exporting Implementation')\r\nexport class CustomExporterComponent implements OnInit, AfterViewInit {\r\n  title = 'mte-test';\r\n  displayedColumns = ['position', 'name', 'surname', 'birth'];\r\n\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  dataSource: MatTableDataSource<Element>;\r\n  customExporter: CustomExporter;\r\n  ngOnInit(): void {\r\n    this.dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\r\n    this.customExporter = new CustomExporter(); // YOU CAN BENEFIT FROM DI TOO.\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n}\r\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  surname: string;\r\n  birth: string;\r\n}\r\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  { position: 1, name: 'Albert', surname: 'Einstein', birth: '1879' },\r\n  { position: 2, name: 'Marie', surname: 'Curie', birth: '1867' },\r\n  { position: 3, name: 'Enrico', surname: 'Fermi', birth: '1901' },\r\n  { position: 4, name: 'Dmitri', surname: 'Mendeleev', birth: '1834' },\r\n  { position: 5, name: 'Alfred', surname: 'Nobel', birth: '1833' },\r\n  { position: 6, name: 'Ernest', surname: 'Lawrence', birth: '1901' },\r\n  { position: 7, name: 'Glenn', surname: 'Seaborg', birth: '1912' },\r\n  { position: 8, name: 'Niels', surname: 'Bohr', birth: '1885' },\r\n  { position: 9, name: 'Lise', surname: 'Meitner', birth: '1878' },\r\n  { position: 10, name: 'Wilhelm', surname: 'Röntgen', birth: '1845' },\r\n  { position: 11, name: 'Nicolaus', surname: 'Copernicus', birth: '1473' },\r\n  { position: 12, name: 'Georgy', surname: 'Flyorov', birth: '1913' },\r\n  { position: 13, name: 'Yuri', surname: 'Oganessian', birth: '1933' },\r\n  { position: 14, name: 'Johan', surname: 'Gadolin', birth: '1760' },\r\n  { position: 15, name: 'Pierre', surname: 'Curie', birth: '1859' },\r\n];\r\n","/* (ignored) */","import { ɵɵdefineInjectable, Injectable, ɵɵinject, Directive, Host, Self, Optional, Input, NgModule } from '@angular/core';\nimport { MatTable, MatTableModule } from '@angular/material/table';\nimport { BehaviorSubject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport isString from 'lodash-es/isString';\nimport isEqual from 'lodash-es/isEqual';\nimport difference from 'lodash-es/difference';\nimport flatten from 'lodash-es/flatten';\nimport cloneDeep from 'lodash-es/cloneDeep';\nimport isNil from 'lodash-es/isNil';\nimport every from 'lodash-es/every';\nimport isFunction from 'lodash-es/isFunction';\nimport isArray from 'lodash-es/isArray';\nimport isBoolean from 'lodash-es/isBoolean';\nimport isNumber from 'lodash-es/isNumber';\nimport isEmpty from 'lodash-es/isEmpty';\n\nvar MatTableFilter;\r\n(function (MatTableFilter) {\r\n    MatTableFilter[\"EQUALS\"] = \"EQUALS\";\r\n    MatTableFilter[\"ANYWHERE\"] = \"ANYWHERE\";\r\n    MatTableFilter[\"STARTS_WITH\"] = \"STARTS_WITH\";\r\n    MatTableFilter[\"ENDS_WITH\"] = \"ENDS_WITH\";\r\n})(MatTableFilter || (MatTableFilter = {}));\n\nclass FilterPredicate {\r\n    executeCondition(itemPair, options) {\r\n        this.handleLetterCasing(itemPair, options.caseSensitive);\r\n        switch (options.filterType) {\r\n            case MatTableFilter.EQUALS:\r\n                return this.equals(itemPair);\r\n            case MatTableFilter.ANYWHERE:\r\n                return this.anywhere(itemPair);\r\n            case MatTableFilter.STARTS_WITH:\r\n                return this.startsWith(itemPair);\r\n            case MatTableFilter.ENDS_WITH:\r\n                return this.endsWith(itemPair);\r\n            default:\r\n                return true;\r\n        }\r\n    }\r\n    handleLetterCasing(itemPair, caseSensitive) {\r\n        if (!caseSensitive) {\r\n            this.transformAllLowerCase(itemPair);\r\n        }\r\n    }\r\n    transformAllLowerCase(object) {\r\n        // tslint:disable-next-line:forin\r\n        for (const key in object) {\r\n            const value = object[key];\r\n            if (isString(value)) {\r\n                object[key] = value.toLowerCase();\r\n            }\r\n            else {\r\n                this.transformAllLowerCase(value);\r\n            }\r\n        }\r\n    }\r\n}\n\nclass ArrayPredicateService extends FilterPredicate {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static warn() {\r\n        console.warn(ArrayPredicateService.UNSUPPORTED_OPERATION_WARNING);\r\n        console.warn(ArrayPredicateService.SUGGESTION_WARNING);\r\n    }\r\n    equals(itemPair) {\r\n        return isEqual(itemPair.example.sort(), itemPair.item.sort());\r\n    }\r\n    anywhere(itemPair) {\r\n        return this.isSubset(itemPair.example, itemPair.item);\r\n    }\r\n    startsWith(itemPair) {\r\n        ArrayPredicateService.warn();\r\n        return this.anywhere(itemPair);\r\n    }\r\n    endsWith(itemPair) {\r\n        ArrayPredicateService.warn();\r\n        return this.anywhere(itemPair);\r\n    }\r\n    isSubset(example, item) {\r\n        return !difference(flatten(example), flatten(item)).length;\r\n    }\r\n}\r\n// tslint:disable-next-line:max-line-length\r\nArrayPredicateService.UNSUPPORTED_OPERATION_WARNING = 'This filterType is unsupported for array filtering. FilterType.ANYWHERE is executed instead!';\r\nArrayPredicateService.SUGGESTION_WARNING = 'You can set a custom predicate for the array property through PropertyOptions!';\r\nArrayPredicateService.ɵprov = ɵɵdefineInjectable({ factory: function ArrayPredicateService_Factory() { return new ArrayPredicateService(); }, token: ArrayPredicateService, providedIn: \"root\" });\r\nArrayPredicateService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nArrayPredicateService.ctorParameters = () => [];\n\nclass AlphaNumericPredicateService extends FilterPredicate {\r\n    constructor() {\r\n        super();\r\n    }\r\n    equals(itemPair) {\r\n        return itemPair.example === itemPair.item;\r\n    }\r\n    anywhere(itemPair) {\r\n        return itemPair.item.includes(itemPair.example);\r\n    }\r\n    startsWith(itemPair) {\r\n        return itemPair.item.startsWith(itemPair.example);\r\n    }\r\n    endsWith(itemPair) {\r\n        return itemPair.item.endsWith(itemPair.example);\r\n    }\r\n}\r\nAlphaNumericPredicateService.ɵprov = ɵɵdefineInjectable({ factory: function AlphaNumericPredicateService_Factory() { return new AlphaNumericPredicateService(); }, token: AlphaNumericPredicateService, providedIn: \"root\" });\r\nAlphaNumericPredicateService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nAlphaNumericPredicateService.ctorParameters = () => [];\n\nclass MatTableFilterService {\r\n    constructor(_alphaNumericService, _arrayService) {\r\n        this._alphaNumericService = _alphaNumericService;\r\n        this._arrayService = _arrayService;\r\n    }\r\n    filterPredicate(itemPair, propertyOptions, commonOptions, propertyName) {\r\n        var _a;\r\n        // tslint:disable-next-line:forin\r\n        const exampleKeys = Object.keys(itemPair.example);\r\n        for (const key of exampleKeys) {\r\n            const exampleValue = cloneDeep(itemPair.example[key]);\r\n            if (isNil(exampleValue) || every(exampleValue, isEmpty) && typeof exampleValue !== 'boolean') {\r\n                // if example entity's property is undefined/null/empty then it means the caller wants all the data\r\n                continue;\r\n            }\r\n            if ((_a = itemPair.item) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(key)) {\r\n                // if example entity has additional columns then search fails\r\n                const itemValue = cloneDeep(itemPair.item[key]);\r\n                const nextPropertyName = this.getNextPropertyName(propertyName, key);\r\n                const options = this.finalizeOptionsForProperty(commonOptions, propertyOptions, nextPropertyName);\r\n                if (isFunction(options)) { // if user defined predicate is present for property\r\n                    const customPredicate = options;\r\n                    if (!customPredicate(itemValue)) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    const columnOptions = options;\r\n                    if (this.isAlphaNumeric(itemValue)) {\r\n                        const valuePair = { item: itemValue.toString(), example: exampleValue };\r\n                        if (!this._alphaNumericService.executeCondition(valuePair, columnOptions)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (isArray(itemValue)) {\r\n                        const valuePair = { item: itemValue, example: exampleValue };\r\n                        if (!this._arrayService.executeCondition(valuePair, columnOptions)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else if (isBoolean(itemValue)) {\r\n                        if (itemValue !== exampleValue) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        const valuePair = { item: itemValue, example: exampleValue };\r\n                        if (!this.filterPredicate(valuePair, propertyOptions, options, nextPropertyName)) {\r\n                            // if one of the inner properties returns true, this shouldnt affect the whole item's filtering\r\n                            // however if it returns false then the item must not be in the list\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    finalizeOptionsForProperty(commonOptions, propertyOptions, propertyName) {\r\n        if (propertyOptions && propertyOptions.hasOwnProperty(propertyName)) {\r\n            return propertyOptions[propertyName];\r\n        }\r\n        else {\r\n            return commonOptions;\r\n        }\r\n    }\r\n    getNextPropertyName(propertyName, key) {\r\n        return propertyName ? (propertyName + '.' + key) : key;\r\n    }\r\n    isChanged(oldEntity, newEntity) {\r\n        return !isEqual(this.toPlainJson(oldEntity), this.toPlainJson(newEntity));\r\n    }\r\n    toPlainJson(object) {\r\n        if (object) {\r\n            return JSON.parse(JSON.stringify(object));\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    isAlphaNumeric(value) {\r\n        return isString(value) || isNumber(value);\r\n    }\r\n}\r\nMatTableFilterService.ɵprov = ɵɵdefineInjectable({ factory: function MatTableFilterService_Factory() { return new MatTableFilterService(ɵɵinject(AlphaNumericPredicateService), ɵɵinject(ArrayPredicateService)); }, token: MatTableFilterService, providedIn: \"root\" });\r\nMatTableFilterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nMatTableFilterService.ctorParameters = () => [\r\n    { type: AlphaNumericPredicateService },\r\n    { type: ArrayPredicateService }\r\n];\n\nclass MatTableFilterDirective {\r\n    constructor(_filterService, _table) {\r\n        this._filterService = _filterService;\r\n        this._table = _table;\r\n        /**\r\n         * in millis\r\n         */\r\n        this.debounceTime = 400;\r\n        this.filterType = MatTableFilter.ANYWHERE;\r\n        this.caseSensitive = false;\r\n        this.initDebounceSubject();\r\n    }\r\n    ngDoCheck() {\r\n        if (this._filterService.isChanged(this._oldExampleEntity, this.exampleEntity)) {\r\n            this._oldExampleEntity = this._filterService.toPlainJson(this.exampleEntity);\r\n            this._exampleEntitySubject.next(undefined);\r\n        }\r\n    }\r\n    initDebounceSubject() {\r\n        this._exampleEntitySubject = new BehaviorSubject(null);\r\n        this._exampleEntitySubject.pipe(debounceTime(this.debounceTime))\r\n            .subscribe(_ => {\r\n            this.updateFilterPredicate();\r\n        });\r\n    }\r\n    updateFilterPredicate() {\r\n        const matDataSource = this.getMatDataSource();\r\n        if (matDataSource) {\r\n            matDataSource.filterPredicate = this.getFilterPredicate();\r\n            matDataSource.filter = this.exampleEntity;\r\n        }\r\n    }\r\n    getFilterPredicate() {\r\n        if (this.customPredicate) {\r\n            return this.customPredicate;\r\n        }\r\n        else {\r\n            return (item) => {\r\n                return this._filterService.filterPredicate({ example: this.exampleEntity, item }, this.propertyOptions, { filterType: this.filterType, caseSensitive: this.caseSensitive });\r\n            };\r\n        }\r\n    }\r\n    getMatDataSource() {\r\n        const matTable = this._table;\r\n        return matTable.dataSource;\r\n    }\r\n}\r\nMatTableFilterDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[matTableFilter]',\r\n                exportAs: 'matTableFilter'\r\n            },] }\r\n];\r\nMatTableFilterDirective.ctorParameters = () => [\r\n    { type: MatTableFilterService },\r\n    { type: MatTable, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }\r\n];\r\nMatTableFilterDirective.propDecorators = {\r\n    exampleEntity: [{ type: Input }],\r\n    debounceTime: [{ type: Input }],\r\n    filterType: [{ type: Input }],\r\n    caseSensitive: [{ type: Input }],\r\n    customPredicate: [{ type: Input }],\r\n    propertyOptions: [{ type: Input }]\r\n};\n\nclass MatTableFilterModule {\r\n}\r\nMatTableFilterModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [MatTableFilterDirective],\r\n                imports: [\r\n                    MatTableModule\r\n                ],\r\n                exports: [MatTableFilterDirective]\r\n            },] }\r\n];\n\n/*\r\n * Public API Surface of mat-table-filter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MatTableFilter, MatTableFilterDirective, MatTableFilterModule, MatTableFilterService, AlphaNumericPredicateService as ɵa, FilterPredicate as ɵb, ArrayPredicateService as ɵc };\n//# sourceMappingURL=mat-table-filter.js.map\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\n\r\n@Component({\r\n  selector: 'app-brief-exporter',\r\n  templateUrl: './brief-exporter.component.html',\r\n  styleUrls: ['./brief-exporter.component.css']\r\n})\r\n@AddToShowCase('exporter', 'brief-exporter.component', 'Overall Exporting Example')\r\nexport class BriefExporterComponent implements AfterViewInit, OnInit {\r\n  title = 'mte-test';\r\n  displayedColumns = ['position', 'name', 'surname', 'birth'];\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  dataSource: MatTableDataSource<Element>;\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n}\r\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  surname: string;\r\n  birth: string;\r\n}\r\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  { position: 1, name: 'Albert', surname: 'Einstein', birth: '1879' },\r\n  { position: 2, name: 'Marie', surname: 'Curie', birth: '1867' },\r\n  { position: 3, name: 'Enrico', surname: 'Fermi', birth: '1901' },\r\n  { position: 4, name: 'Dmitri', surname: 'Mendeleev', birth: '1834' },\r\n  { position: 5, name: 'Alfred', surname: 'Nobel', birth: '1833' },\r\n  { position: 6, name: 'Ernest', surname: 'Lawrence', birth: '1901' },\r\n  { position: 7, name: 'Glenn', surname: 'Seaborg', birth: '1912' },\r\n  { position: 8, name: 'Niels', surname: 'Bohr', birth: '1885' },\r\n  { position: 9, name: 'Lise', surname: 'Meitner', birth: '1878' },\r\n  { position: 10, name: 'Wilhelm', surname: 'Röntgen', birth: '1845' },\r\n  { position: 11, name: 'Nicolaus', surname: 'Copernicus', birth: '1473' },\r\n  { position: 12, name: 'Georgy', surname: 'Flyorov', birth: '1913' },\r\n  { position: 13, name: 'Yuri', surname: 'Oganessian', birth: '1933' },\r\n  { position: 14, name: 'Johan', surname: 'Gadolin', birth: '1760' },\r\n  { position: 15, name: 'Pierre', surname: 'Curie', birth: '1859' },\r\n];\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","<div class=\"docs-page\">\r\n  <mat-tab-group mat-align-tabs=\"start\">\r\n    <mat-tab label=\"Overview\">\r\n      <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/filter/README.md'\"></markdown>\r\n    </mat-tab>\r\n    <mat-tab label=\"API\">\r\n      <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/filter/API.md'\"></markdown>\r\n    </mat-tab>\r\n    <mat-tab label=\"Examples\">\r\n      <app-example-viewer *ngFor=\"let example of examples\" [exampleType]=\"example\"></app-example-viewer>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n  </div>\r\n","<div class=\"docs-page\">\r\n<mat-tab-group mat-align-tabs=\"start\">\r\n  <mat-tab label=\"Overview\">\r\n    <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/exporter/README.md'\"></markdown>\r\n  </mat-tab>\r\n  <mat-tab label=\"API\">\r\n    <markdown ngPreserveWhitespaces [src]=\"'assets/md-files/exporter/API.md'\"></markdown>\r\n  </mat-tab>\r\n  <mat-tab label=\"Examples\">\r\n    <app-example-viewer *ngFor=\"let example of examples\" [exampleType]=\"example\"></app-example-viewer>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n</div>\r\n","<p>Demonstrates filtering of an Array type column. Enter Size chips for filtering.</p>\r\n\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\" [filterType]=\"filterType\" [dataSource]=\"dataSource\"\r\n  class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"category\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Category\" [(ngModel)]=\"filterEntity.category\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.category}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"brand\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Product Brand\" [(ngModel)]=\"filterEntity.brand\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.brand}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"availableSizes\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n\r\n      <mat-form-field class=\"example-chip-list\">\r\n        <mat-chip-list #chipList aria-label=\"Fruit selection\">\r\n          <mat-chip *ngFor=\"let size of filterEntity.availableSizes\" [selectable]=\"true\" [removable]=\"true\"\r\n            (removed)=\"remove(size)\">\r\n            {{size}}\r\n            <mat-icon matChipRemove>cancel</mat-icon>\r\n          </mat-chip>\r\n          <input placeholder=\"Add Size\" [matChipInputFor]=\"chipList\"\r\n            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\" [matChipInputAddOnBlur]=\"true\"\r\n            (matChipInputTokenEnd)=\"add($event)\">\r\n        </mat-chip-list>\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.availableSizes}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","import { MatTableFilter } from 'mat-table-filter';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\n\r\nexport class Product {\r\n  category: string;\r\n  brand: string;\r\n  availableSizes: Array<string>;\r\n}\r\n\r\nconst PRODUCTS: Product[] = [\r\n  {category: 'T-Shirt', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'T-Shirt', brand: 'Y', availableSizes: ['S', 'L', 'XL']},\r\n  {category: 'T-Shirt', brand: 'Z', availableSizes: ['XL']},\r\n  {category: 'Jean', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'Jean', brand: 'Y', availableSizes: ['S', 'M']},\r\n  {category: 'Jean', brand: 'Z', availableSizes: ['S', 'M', 'L']},\r\n  {category: 'Jean', brand: 'B', availableSizes: ['S', 'M', 'L']},\r\n  {category: 'Jacket', brand: 'X', availableSizes: ['S', 'L', 'XL']},\r\n  {category: 'Jacket', brand: 'Z', availableSizes: ['S']},\r\n  {category: 'Pants', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'Pants', brand: 'Y', availableSizes: ['L', 'XL']},\r\n  {category: 'Pants', brand: 'Z', availableSizes: ['S']},\r\n  {category: 'Hat', brand: 'X', availableSizes: ['S', 'M', 'L']},\r\n  {category: 'Skirt', brand: 'X', availableSizes: ['S', 'M', 'L', 'XL']},\r\n  {category: 'Skirt', brand: 'Y', availableSizes: ['S', 'M', 'L']}\r\n ];\r\n\r\n@Component({\r\n  selector: 'app-array-filter',\r\n  templateUrl: './array-filter.component.html',\r\n  styleUrls: ['./array-filter.component.css']\r\n})\r\n@AddToShowCase('filter', 'array-filter.component', 'Array Filter')\r\nexport class ArrayFilterComponent implements OnInit {\r\n  filterEntity: Product;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['category', 'brand', 'availableSizes'];\r\n  dataSource;\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const input = event.input;\r\n    const value = event.value;\r\n\r\n    // Add our fruit\r\n    if ((value || '').trim()) {\r\n      this.filterEntity.availableSizes.push(value.trim());\r\n    }\r\n\r\n    // Reset the input value\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n  }\r\n\r\n  remove(size: string): void {\r\n    const index = this.filterEntity.availableSizes.indexOf(size);\r\n\r\n    if (index >= 0) {\r\n      this.filterEntity.availableSizes.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filterEntity = new Product();\r\n    this.filterEntity.availableSizes = new Array<string>(); // DO NOT FORGET TO INIT THE ARRAY\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.dataSource = new MatTableDataSource(PRODUCTS);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {}\r\n","<div class=\"docs-example-viewer-wrapper\">\r\n    <div class=\"docs-example-viewer-title\">\r\n      <div class=\"docs-example-viewer-title-spacer\">{{description}}</div>\r\n\r\n      <button mat-icon-button type=\"button\" (click)=\"toggleSource()\"\r\n              [matTooltip]=\"'View source'\">\r\n        <mat-icon>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\" viewBox=\"0 0 24 24\" fit=\"\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\">\r\n            <path fill=\"none\" d=\"M0 0h24v24H0V0z\"></path>\r\n            <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"></path>\r\n          </svg>\r\n        </mat-icon>\r\n      </button>\r\n      <!-- <button mat-icon-button type=\"button\" [matTooltip]=\"'Edit in Stackblitz'\">\r\n        <mat-icon>\r\n          open_in_new\r\n        </mat-icon>\r\n      </button> -->\r\n  </div>\r\n\r\n    <div class=\"docs-example-viewer-source\" *ngIf=\"showSource\">\r\n      <mat-tab-group class=\"docs-source-tabs\">\r\n        <mat-tab label=\"HTML\">\r\n            <markdown [src]=\"htmlDoc\"></markdown>\r\n        </mat-tab>\r\n        <mat-tab label=\"TS\">\r\n            <markdown [src]=\"tsDoc\"></markdown>\r\n        </mat-tab>\r\n        <mat-tab label=\"CSS\">\r\n            <markdown [src]=\"cssDoc\"></markdown>\r\n          </mat-tab>\r\n      </mat-tab-group>\r\n    </div>\r\n    <mat-divider></mat-divider>\r\n    <div class=\"docs-example-viewer-body\">\r\n      <ng-template [cdkPortalOutlet]=\"example\"></ng-template>\r\n    </div>\r\n  </div>\r\n","<p>Briefly demonstrates all exporting functionalities of mat-table-exporter.</p>\r\n\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table matTableExporter [dataSource]=\"dataSource\" #exporter=\"matTableExporter\" [hiddenColumns]=\"[0]\">\r\n\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <mat-header-cell *matHeaderCellDef> Surname </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.surname}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"birth\">\r\n      <mat-header-cell *matHeaderCellDef> Birth </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.birth}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n<div>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('xlsx', {sheet: 'sheet_name', Props: {Author: 'Talha'}, columnWidths: [50, 5, 3]})\">Excel</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('csv')\">Csv</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('json')\">Json</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('txt')\">Txt</button>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\n\r\nexport class Route {\r\n  name: string;\r\n  journeyTime: string;\r\n}\r\n\r\nconst ROUTES: Route[] = [\r\n {name: 'FRA-IST-JFK', journeyTime: '10:00'},\r\n {name: 'MLE-IST-ESB', journeyTime: '10:30'},\r\n {name: 'IST-ESB-GZT', journeyTime: '01:30'},\r\n {name: 'IST-ESB-GZT', journeyTime: '01:30'},\r\n {name: 'JFK-SAW-AYT', journeyTime: '02:45'},\r\n {name: 'JFK-SAW-FRA', journeyTime: '02:45'},\r\n {name: 'JFK-SAW-FRA', journeyTime: '02:45'}\r\n];\r\n\r\n@Component({\r\n  selector: 'app-simple-filter',\r\n  templateUrl: './custom-column-filter.component.html',\r\n  styleUrls: ['./custom-column-filter.component.css']\r\n})\r\n@AddToShowCase('filter', 'custom-column-filter.component', 'Custom Property Predicate')\r\nexport class CustomColumnFilterComponent implements OnInit {\r\n  filterEntity: Route;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['name', 'journeyTime'];\r\n  propertyOptions;\r\n  dataSource;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.filterEntity = new Route();\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.dataSource = new MatTableDataSource(ROUTES);\r\n    this.propertyOptions = {name: (routeName: string) => { // Custom filtering for name property\r\n      return routeName.split('-')[1] === this.filterEntity.name; // filter for only the station in the middle\r\n    }};\r\n  }\r\n}\r\n","<p>Demonstrates the use of a custom exporter implementation.</p>\r\n\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table matTableExporter [dataSource]=\"dataSource\" [exporter]= \"customExporter\" #exportDirective=\"matTableExporter\" [hiddenColumns]=\"[0]\" >\r\n\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <mat-header-cell *matHeaderCellDef> Surname </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.surname}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"birth\">\r\n      <mat-header-cell *matHeaderCellDef> Birth </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.birth}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n<div>\r\n  <button mat-raised-button (click)=\"exportDirective.exportTable('other')\">Custom Export</button>\r\n</div>\r\n","<p>Demonstrates a custom filtering requirement where only some part of the string needs to be filtered.</p>\r\n<p>Flight Route is filtered according to the custom filtering predicate provided with propertyOptions.</p>\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\" [propertyOptions]=\"propertyOptions\"\r\n[filterType]=\"filterType\" [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Flight Route\" [(ngModel)]=\"filterEntity.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"journeyTime\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      Journey Time\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.journeyTime}} </mat-cell>\r\n  </ng-container>\r\n\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatTableFilter, PropertyOptions } from 'mat-table-filter';\r\n\r\nexport class Captain {\r\n  name: string;\r\n  surname: string;\r\n}\r\n\r\nexport class SpaceCraft {\r\n  name: string;\r\n  isConstitutionClass: boolean;\r\n  captain: Captain;\r\n}\r\n\r\nconst SPACECRAFT_DATA: SpaceCraft[] = [\r\n  {name: 'Endurance', isConstitutionClass: false, captain: {name: 'Joseph', surname: 'Cooper'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Talha', surname: 'Türe'}},\r\n  {name: 'Discovery', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: false, captain: {name: 'Jean-Luc', surname: 'Pickard'}}\r\n];\r\n\r\n@Component({\r\n  selector: 'app-property-options',\r\n  templateUrl: './property-options.component.html',\r\n  styleUrls: ['./property-options.component.css']\r\n})\r\n@AddToShowCase('filter', 'property-options.component', 'Changing Property Options')\r\nexport class PropertyOptionsComponent implements OnInit {\r\n  filterEntity: SpaceCraft;\r\n  filterType: MatTableFilter;\r\n\r\n  propertyOptions: PropertyOptions;\r\n\r\n  displayedColumns: string[] = ['name', 'captainName', 'captainSurname', 'isConstitutionClass'];\r\n  dataSource;\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Do not forget to initialize your object and it's non-primitive properties\r\n    this.filterEntity = new SpaceCraft();\r\n    this.filterEntity.captain = new Captain();\r\n    this.filterEntity.isConstitutionClass = false; // leaving a filter property undefined means you want all the data without filtering\r\n    this.dataSource = new MatTableDataSource(SPACECRAFT_DATA);\r\n\r\n    // captain.name property filtering needs an exact match with case sensitiveness\r\n    // All other properties will be filtered with ANYWHERE search\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.propertyOptions = {'captain.name': {filterType: MatTableFilter.EQUALS, caseSensitive: true}};\r\n  }\r\n}\r\n","\r\nimport { MatTableFilterModule } from 'mat-table-filter';\r\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\n// tslint:disable-next-line:max-line-length\r\n\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatTableExporterModule } from 'mat-table-exporter';\r\nimport { ExporterComponent } from './components/exporter/exporter.component';\r\nimport { FilterComponent } from './components/filter/filter.component';\r\nimport { MarkdownModule, MarkedOptions } from 'ngx-markdown';\r\nimport { AppComponent } from './app.component';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ExampleViewerComponent } from './components/example-viewer/example-viewer.component';\r\nimport { SimpleFilterComponent } from './components/examples/simple-filter/simple-filter.component';\r\nimport { CustomColumnFilterComponent } from './components/examples/custom-column-filter/custom-column-filter.component';\r\nimport { ArrayFilterComponent } from './components/examples/array-filter/array-filter.component';\r\nimport { PropertyOptionsComponent } from './components/examples/property-options/property-options.component';\r\nimport { BriefExporterComponent } from './components/examples/brief-exporter/brief-exporter.component';\r\nimport { CustomExporterComponent } from './components/examples/custom-exporter/custom-exporter.component';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { SelectionExporterComponent } from './components/examples/selection-exporter/selection-exporter.component';\r\n\r\nexport function markedOptions(): MarkedOptions {\r\n\r\n  return {\r\n    gfm: true,\r\n    breaks: false,\r\n    pedantic: false,\r\n    smartLists: true,\r\n    smartypants: false,\r\n  };\r\n}\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ExporterComponent,\r\n    FilterComponent,\r\n    ExampleViewerComponent,\r\n    ArrayFilterComponent,\r\n    CustomColumnFilterComponent,\r\n    SimpleFilterComponent,\r\n    PropertyOptionsComponent,\r\n    BriefExporterComponent,\r\n    CustomExporterComponent,\r\n    SelectionExporterComponent\r\n  ],\r\n  imports: [\r\n    HttpClientModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    PortalModule,\r\n    MarkdownModule.forRoot({\r\n      loader: HttpClient,\r\n      markedOptions: {\r\n        provide: MarkedOptions,\r\n        useFactory: markedOptions,\r\n      },\r\n    }),\r\n    BrowserAnimationsModule,\r\n    MatTableFilterModule,\r\n    MatTableExporterModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatChipsModule,\r\n    MatDividerModule,\r\n    MatTooltipModule,\r\n    MatSlideToggleModule,\r\n    MatCheckboxModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n  entryComponents: [\r\n    ArrayFilterComponent,\r\n    BriefExporterComponent,\r\n    CustomColumnFilterComponent,\r\n    CustomExporterComponent,\r\n    SimpleFilterComponent,\r\n    PropertyOptionsComponent,\r\n    SelectionExporterComponent\r\n\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatTableFilter } from 'mat-table-filter';\r\n\r\nexport class Captain {\r\n  name: string;\r\n  surname: string;\r\n}\r\n\r\nexport class SpaceCraft {\r\n  name: string;\r\n  isConstitutionClass: boolean;\r\n  captain: Captain;\r\n}\r\n\r\nconst SPACECRAFT_DATA: SpaceCraft[] = [\r\n  {name: 'Endurance', isConstitutionClass: false, captain: {name: 'Joseph', surname: 'Cooper'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: true, captain: {name: 'Talha', surname: 'Türe'}},\r\n  {name: 'Discovery', isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Enterprise', isConstitutionClass: false, captain: {name: 'Jean-Luc', surname: 'Pickard'}},\r\n  {name: null, isConstitutionClass: true, captain: {name: 'Christopher', surname: 'Pike'}},\r\n  {name: 'Discovery', isConstitutionClass: true, captain: null}\r\n];\r\n\r\n@Component({\r\n  selector: 'app-simple-filter',\r\n  templateUrl: './simple-filter.component.html',\r\n  styleUrls: ['./simple-filter.component.css']\r\n})\r\n@AddToShowCase('filter', 'simple-filter.component', 'Simple Filter')\r\nexport class SimpleFilterComponent implements OnInit {\r\n  filterEntity: SpaceCraft;\r\n  filterType: MatTableFilter;\r\n  displayedColumns: string[] = ['name', 'captainName', 'captainSurname', 'isConstitutionClass'];\r\n  dataSource;\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Do not forget to initialize your object and it's non-primitive properties\r\n    this.filterEntity = new SpaceCraft();\r\n    this.filterEntity.captain = new Captain();\r\n    this.filterEntity.isConstitutionClass = false; // leaving a filter property undefined means you want all the data without filtering\r\n    this.filterType = MatTableFilter.ANYWHERE;\r\n    this.dataSource = new MatTableDataSource(SPACECRAFT_DATA);\r\n  }\r\n}\r\n","import { SelectionModel } from '@angular/cdk/collections';\r\nimport { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AddToShowCase } from '../../add-to-showcase';\r\nimport { MatTableExporterDirective } from 'mat-table-exporter';\r\n\r\n@Component({\r\n  selector: 'app-selection-exporter',\r\n  templateUrl: './selection-exporter.component.html',\r\n  styleUrls: ['./selection-exporter.component.css']\r\n})\r\n@AddToShowCase('exporter', 'selection-exporter.component', 'Selected Row Exporting Example')\r\nexport class SelectionExporterComponent implements AfterViewInit, OnInit {\r\n  title = 'mte-test';\r\n  displayedColumns = ['select', 'position', 'name', 'surname', 'birth'];\r\n  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\r\n  @ViewChild(MatTableExporterDirective, { static: false }) exporter: MatTableExporterDirective;\r\n  dataSource: MatTableDataSource<Element>;\r\n  selection = new SelectionModel<Element>(true, []);\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<Element>(ELEMENT_DATA);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  private isAllSelected() {\r\n    const numSelected = this.selection.selected.length;\r\n    const numRows = this.dataSource.data.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  toggleRow(row: any, index: number) {\r\n    this.selection.toggle(row);\r\n    this.exporter.toggleRow(index);\r\n  }\r\n\r\n  /** The label for the checkbox on the passed row */\r\n  checkboxLabel(row?: Element): string {\r\n    if (!row) {\r\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\r\n    }\r\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\r\n  }\r\n}\r\n\r\nexport interface Element {\r\n  name: string;\r\n  position: number;\r\n  surname: string;\r\n  birth: string;\r\n}\r\n\r\nconst ELEMENT_DATA: Element[] = [\r\n  { position: 1, name: 'Albert', surname: 'Einstein', birth: '1879' },\r\n  { position: 2, name: 'Marie', surname: 'Curie', birth: '1867' },\r\n  { position: 3, name: 'Enrico', surname: 'Fermi', birth: '1901' },\r\n  { position: 4, name: 'Dmitri', surname: 'Mendeleev', birth: '1834' },\r\n  { position: 5, name: 'Alfred', surname: 'Nobel', birth: '1833' },\r\n  { position: 6, name: 'Ernest', surname: 'Lawrence', birth: '1901' },\r\n  { position: 7, name: 'Glenn', surname: 'Seaborg', birth: '1912' },\r\n  { position: 8, name: 'Niels', surname: 'Bohr', birth: '1885' },\r\n  { position: 9, name: 'Lise', surname: 'Meitner', birth: '1878' },\r\n  { position: 10, name: 'Wilhelm', surname: 'Röntgen', birth: '1845' },\r\n  { position: 11, name: 'Nicolaus', surname: 'Copernicus', birth: '1473' },\r\n  { position: 12, name: 'Georgy', surname: 'Flyorov', birth: '1913' },\r\n  { position: 13, name: 'Yuri', surname: 'Oganessian', birth: '1933' },\r\n  { position: 14, name: 'Johan', surname: 'Gadolin', birth: '1760' },\r\n  { position: 15, name: 'Pierre', surname: 'Curie', birth: '1859' },\r\n];\r\n\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\r\n\r\n@Component({\r\n  selector: 'app-example-viewer',\r\n  templateUrl: './example-viewer.component.html',\r\n  styleUrls: ['./example-viewer.component.css']\r\n})\r\nexport class ExampleViewerComponent {\r\n\r\n  private static readonly ASSETS_ROOT: string = './assets/';\r\n  private static readonly SOURCES_PATH: string = 'example-sources/';\r\n\r\n  example: ComponentPortal<any>;\r\n  private fileName: string;\r\n  description: string;\r\n  stackBlitzLink: string;\r\n  @Input()\r\n  set exampleType(type: ComponentType<any>) {\r\n    this.example = new ComponentPortal(type);\r\n    this.fileName = type.prototype.fileName;\r\n    this.description = type.prototype.description;\r\n    // this.stackBlitzLink = type.prototype.stackBlitzLink;\r\n    this.htmlDoc = this.resolveFilePath('.html'); // Will be replaced with a more convinient webpack/bazel solution\r\n    this.tsDoc =  this.resolveFilePath('.js');\r\n    this.cssDoc =  this.resolveFilePath('.css');\r\n  }\r\n\r\n  showSource: boolean;\r\n  htmlDoc: string;\r\n  tsDoc: string;\r\n  cssDoc: string;\r\n\r\n  constructor() { }\r\n\r\n  toggleSource() {\r\n    this.showSource = !this.showSource;\r\n  }\r\n\r\n  private resolveFilePath(extension: string): string {\r\n    return ExampleViewerComponent.ASSETS_ROOT + ExampleViewerComponent.SOURCES_PATH +\r\n    this.fileName.replace('.component', '/') +\r\n    this.fileName + extension;\r\n  }\r\n\r\n}\r\n","import { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule, ɵɵdefineInjectable, Injectable, ɵɵinject, INJECTOR, Injector, EventEmitter, Directive, Renderer2, Input, Output } from '@angular/core';\nimport { utils, write } from 'xlsx/dist/xlsx.mini.min';\nimport { saveAs } from 'file-saver-es';\n\nclass CdkTableExporterModule {\r\n}\r\nCdkTableExporterModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [],\r\n                imports: [\r\n                    CdkTableModule\r\n                ],\r\n                exports: []\r\n            },] }\r\n];\n\nvar ExportType;\r\n(function (ExportType) {\r\n    ExportType[\"XLS\"] = \"xls\";\r\n    ExportType[\"XLSX\"] = \"xlsx\";\r\n    ExportType[\"CSV\"] = \"csv\";\r\n    ExportType[\"TXT\"] = \"txt\";\r\n    ExportType[\"JSON\"] = \"json\";\r\n    ExportType[\"OTHER\"] = \"other\";\r\n})(ExportType || (ExportType = {}));\n\nclass DataExtractorService {\r\n    constructor() { }\r\n    extractRows(cdkTable, hiddenColumns, outlet) {\r\n        return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet !== null && outlet !== void 0 ? outlet : cdkTable._rowOutlet);\r\n    }\r\n    getRowsAsJsonArray(cdkTable, hiddenColumns, outlet) {\r\n        const renderedRows = this.getRenderedRows(cdkTable, outlet);\r\n        return this.convertToJsonArray(hiddenColumns, renderedRows);\r\n    }\r\n    getRenderedRows(cdkTable, outlet) {\r\n        return cdkTable._getRenderedRows(outlet);\r\n    }\r\n    convertToJsonArray(hiddenColumns, rows) {\r\n        const result = new Array();\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = this.convertRow(hiddenColumns, rows[i]);\r\n            result.push(this.createExcelItem(row));\r\n        }\r\n        return result;\r\n    }\r\n    convertRow(hiddenColumns, row) {\r\n        const result = new Array();\r\n        const cells = row.children;\r\n        for (let i = 0; i < cells.length; i++) {\r\n            if (!this.shouldHide(hiddenColumns, i)) {\r\n                const element = (cells.item(i).innerText).trim();\r\n                result.push(element);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    shouldHide(hiddenColumns, columnIndex) {\r\n        if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    createExcelItem(row) {\r\n        return Object.assign({}, row);\r\n    }\r\n}\r\nDataExtractorService.ɵprov = ɵɵdefineInjectable({ factory: function DataExtractorService_Factory() { return new DataExtractorService(); }, token: DataExtractorService, providedIn: \"root\" });\r\nDataExtractorService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nDataExtractorService.ctorParameters = () => [];\n\nclass Mime {\r\n    constructor(extension, contentTypeHeader) {\r\n        this.extension = extension;\r\n        this.contentTypeHeader = contentTypeHeader;\r\n    }\r\n}\n\nconst MAT_TABLE_EXPORTER = 'mat-table-exporter';\r\nconst TYPE_ARRAY = 'array';\r\nconst CHAR_SET_UTF = ';charset=utf-';\r\nconst CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\r\nconst CONTENT_TYPE_TEXT = ExportType.TXT + '/';\r\nconst CONTENT_TYPE_APPLICATION = 'application/';\r\nconst CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\r\nconst DOT = '.';\r\nconst COMMA = ',';\r\nconst EXTENSION_XLS = DOT + ExportType.XLS;\r\nconst EXTENSION_XLSX = DOT + ExportType.XLSX;\r\nconst EXTENSION_CSV = DOT + ExportType.CSV;\r\nconst EXTENSION_JSON = DOT + ExportType.JSON;\r\nconst EXTENSION_TEXT = DOT + ExportType.TXT;\r\nconst MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nconst MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\r\nconst MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\r\nconst MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\r\nconst MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\r\nconst REF = '!ref';\r\nconst XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\r\nconst RETURN = '\\n';\r\nconst TAB = '\\t';\r\nconst XLSX_COLS = '!cols';\r\nconst BOM = '\\uFEFF';\n\nclass FileUtil {\r\n    static save(content, mime, options) {\r\n        const blob = new Blob([content], { type: mime.contentTypeHeader });\r\n        let fileName = MAT_TABLE_EXPORTER;\r\n        if (options && options.fileName) {\r\n            fileName = options.fileName;\r\n        }\r\n        saveAs(blob, fileName + mime.extension);\r\n    }\r\n    static isXls(fileName) {\r\n        return fileName.toLowerCase().match(XLS_REGEX) != null;\r\n    }\r\n    static identifyExportType(fileName) {\r\n        if (fileName && FileUtil.isXls(fileName)) {\r\n            return ExportType.XLS;\r\n        }\r\n        else {\r\n            return ExportType.XLSX;\r\n        }\r\n    }\r\n    static removeExtension(options) {\r\n        options.fileName = options.fileName.split(DOT)[0];\r\n    }\r\n}\n\nclass FileExporter {\r\n    constructor() { }\r\n    export(rows, options) {\r\n        if (!rows) {\r\n            throw new Error('Empty json array is provided, rows parameter is mandatory!');\r\n        }\r\n        const content = this.createContent(rows, options);\r\n        const mimeType = this.getMimeType();\r\n        FileUtil.save(content, mimeType, options);\r\n    }\r\n}\n\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\r\nclass WorksheetExporter extends FileExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    createContent(rows, options) {\r\n        const workSheet = utils.json_to_sheet(rows, {\r\n            skipHeader: true // we don't want to see object properties as our headers\r\n        });\r\n        return this.workSheetToContent(workSheet, options);\r\n    }\r\n}\n\nclass CsvExporterService extends WorksheetExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    workSheetToContent(worksheet, options) {\r\n        var _a;\r\n        return BOM + utils.sheet_to_csv(worksheet, { FS: (_a = options === null || options === void 0 ? void 0 : options.delimiter) !== null && _a !== void 0 ? _a : COMMA });\r\n    }\r\n    getMimeType() {\r\n        return MIME_CSV;\r\n    }\r\n}\r\nCsvExporterService.ɵprov = ɵɵdefineInjectable({ factory: function CsvExporterService_Factory() { return new CsvExporterService(); }, token: CsvExporterService, providedIn: \"root\" });\r\nCsvExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nCsvExporterService.ctorParameters = () => [];\n\nclass TxtExporterService extends FileExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    createContent(rows, options) {\r\n        let content = '';\r\n        rows.forEach(element => {\r\n            content += Object.values(element).join(this.getDelimiter(options)) + RETURN;\r\n        });\r\n        return content;\r\n    }\r\n    getMimeType() {\r\n        return MIME_TXT;\r\n    }\r\n    getDelimiter(options) {\r\n        if (options && options.delimiter) {\r\n            return options.delimiter;\r\n        }\r\n        else {\r\n            return TAB;\r\n        }\r\n    }\r\n}\r\nTxtExporterService.ɵprov = ɵɵdefineInjectable({ factory: function TxtExporterService_Factory() { return new TxtExporterService(); }, token: TxtExporterService, providedIn: \"root\" });\r\nTxtExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nTxtExporterService.ctorParameters = () => [];\n\nclass XlsExporterService extends WorksheetExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    workSheetToContent(worksheet, options = {}) {\r\n        const workBook = utils.book_new();\r\n        if (options.columnWidths) {\r\n            worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\r\n        }\r\n        this.correctTypes(options);\r\n        utils.book_append_sheet(workBook, worksheet, options.sheet);\r\n        return write(workBook, options);\r\n    }\r\n    getMimeType() {\r\n        return MIME_EXCEL_XLS;\r\n    }\r\n    correctTypes(options) {\r\n        if (!options.type) {\r\n            options.type = TYPE_ARRAY;\r\n        }\r\n        options.bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\r\n    }\r\n    convertToWch(columnWidths) {\r\n        return columnWidths.map(width => ({ wch: width }));\r\n    }\r\n}\r\nXlsExporterService.ɵprov = ɵɵdefineInjectable({ factory: function XlsExporterService_Factory() { return new XlsExporterService(); }, token: XlsExporterService, providedIn: \"root\" });\r\nXlsExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nXlsExporterService.ctorParameters = () => [];\n\nclass JsonExporterService extends FileExporter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    createContent(rows, options) {\r\n        return JSON.stringify(rows);\r\n    }\r\n    getMimeType() {\r\n        return MIME_JSON;\r\n    }\r\n}\r\nJsonExporterService.ɵprov = ɵɵdefineInjectable({ factory: function JsonExporterService_Factory() { return new JsonExporterService(); }, token: JsonExporterService, providedIn: \"root\" });\r\nJsonExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nJsonExporterService.ctorParameters = () => [];\n\nclass XlsxExporterService extends XlsExporterService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    // override\r\n    getMimeType() {\r\n        return MIME_EXCEL_XLSX;\r\n    }\r\n}\r\nXlsxExporterService.ɵprov = ɵɵdefineInjectable({ factory: function XlsxExporterService_Factory() { return new XlsxExporterService(); }, token: XlsxExporterService, providedIn: \"root\" });\r\nXlsxExporterService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nXlsxExporterService.ctorParameters = () => [];\n\nclass ServiceLocatorService {\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    getService(exportType) {\r\n        switch (exportType) {\r\n            case ExportType.XLS.valueOf():\r\n                return this.injector.get(XlsExporterService);\r\n            case ExportType.XLSX.valueOf():\r\n                return this.injector.get(XlsxExporterService);\r\n            case ExportType.JSON.valueOf():\r\n                return this.injector.get(JsonExporterService);\r\n            case ExportType.TXT.valueOf():\r\n                return this.injector.get(TxtExporterService);\r\n            case ExportType.CSV.valueOf():\r\n                return this.injector.get(CsvExporterService);\r\n            case ExportType.OTHER.valueOf():\r\n                return null;\r\n            default:\r\n                return this.injector.get(XlsxExporterService);\r\n        }\r\n    }\r\n}\r\nServiceLocatorService.ɵprov = ɵɵdefineInjectable({ factory: function ServiceLocatorService_Factory() { return new ServiceLocatorService(ɵɵinject(INJECTOR)); }, token: ServiceLocatorService, providedIn: \"root\" });\r\nServiceLocatorService.decorators = [\r\n    { type: Injectable, args: [{\r\n                providedIn: 'root'\r\n            },] }\r\n];\r\nServiceLocatorService.ctorParameters = () => [\r\n    { type: Injector }\r\n];\n\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\r\nclass CdkTableExporter {\r\n    constructor(renderer, serviceLocator, dataExtractor, _cdkTable) {\r\n        this.renderer = renderer;\r\n        this.serviceLocator = serviceLocator;\r\n        this.dataExtractor = dataExtractor;\r\n        this._cdkTable = _cdkTable;\r\n        this.exportCompleted = new EventEmitter();\r\n        this.exportStarted = new EventEmitter();\r\n    }\r\n    /**\r\n     * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n     */\r\n    exportTable(exportType, options) {\r\n        this.loadExporter(exportType);\r\n        this._options = options;\r\n        this.exportStarted.emit();\r\n        this._isIterating = true;\r\n        this._isExporting = true;\r\n        this._data = new Array();\r\n        this.extractTableHeader();\r\n        try {\r\n            this.exportWithPagination();\r\n        }\r\n        catch (notPaginated) {\r\n            this.exportSinglePage();\r\n        }\r\n    }\r\n    toggleRow(index) {\r\n        const paginatedRowIndex = this.getPaginatedRowIndex(index);\r\n        if (this.isToggleOn(paginatedRowIndex)) {\r\n            this.toggleOff(paginatedRowIndex);\r\n        }\r\n        else {\r\n            this.toggleOn(paginatedRowIndex);\r\n        }\r\n    }\r\n    /**\r\n     * This event will clear rows selection done using toggleRow functionality\r\n     */\r\n    resetToggleRows() {\r\n        this._selectedRows = [];\r\n    }\r\n    toggleOn(index) {\r\n        this._selectedRows = [...(this._selectedRows || []), index];\r\n    }\r\n    toggleOff(index) {\r\n        this._selectedRows = this._selectedRows.filter(x => x !== index);\r\n    }\r\n    isToggleOn(index) {\r\n        var _a;\r\n        return (_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.includes(index);\r\n    }\r\n    loadExporter(exportType) {\r\n        if (exportType === ExportType.OTHER.valueOf()) {\r\n            this._exporterService = this.exporter;\r\n        }\r\n        else {\r\n            this._exporterService = this.serviceLocator.getService(exportType);\r\n        }\r\n    }\r\n    exportWithPagination() {\r\n        this._initialPageIndex = this.getCurrentPageIndex();\r\n        this.initPageHandler();\r\n        this.goToPage(0);\r\n    }\r\n    exportSinglePage() {\r\n        this.extractDataOnCurrentPage();\r\n        this.extractTableFooter();\r\n        this.exportExtractedData();\r\n    }\r\n    extractDataOnCurrentPage() {\r\n        const rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\r\n        this._data = this._data.concat(this.getSelectedRows(rows));\r\n    }\r\n    getSelectedRows(rows) {\r\n        if (this.isSelectiveExport()) {\r\n            return rows.filter((_, i) => this._selectedRows.includes(this.getPaginatedRowIndex(i)));\r\n        }\r\n        else {\r\n            return rows;\r\n        }\r\n    }\r\n    isSelectiveExport() {\r\n        return this._selectedRows && !this.isMasterToggleOff() && !this.isMasterToggleOn();\r\n    }\r\n    isMasterToggleOn() {\r\n        return this.compareSelectedRowCount(this.getTotalItemsCount());\r\n    }\r\n    isMasterToggleOff() {\r\n        return this.compareSelectedRowCount(0);\r\n    }\r\n    compareSelectedRowCount(rowCount) {\r\n        var _a;\r\n        return !!(((_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.length) === rowCount);\r\n    }\r\n    initPageHandler() {\r\n        if (!this._subscription) {\r\n            this._subscription = this.getPageChangeObservable().subscribe(() => {\r\n                setTimeout(() => {\r\n                    if (this._isIterating) {\r\n                        this.extractDataOnCurrentPage();\r\n                        if (this.hasNextPage()) {\r\n                            this.nextPage();\r\n                        }\r\n                        else {\r\n                            this._isIterating = false;\r\n                            this.goToPage(this._initialPageIndex);\r\n                        }\r\n                    }\r\n                    else if (this._isExporting) {\r\n                        this._isExporting = false;\r\n                        this.extractTableFooter();\r\n                        this.exportExtractedData();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    exportExtractedData() {\r\n        this._exporterService.export(this._data, this._options);\r\n        this._data = new Array();\r\n        this.exportCompleted.emit();\r\n    }\r\n    extractSpecialRows(outlet) {\r\n        this._data.push(...this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet));\r\n    }\r\n    extractTableHeader() {\r\n        this.extractSpecialRows(this._cdkTable._headerRowOutlet);\r\n    }\r\n    extractTableFooter() {\r\n        this.extractSpecialRows(this._cdkTable._footerRowOutlet);\r\n    }\r\n    hasNextPage() {\r\n        if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    nextPage() {\r\n        this.goToPage(this.getCurrentPageIndex() + 1);\r\n    }\r\n    getPaginatedRowIndex(index) {\r\n        return index + (this.getPageSize() * this.getCurrentPageIndex());\r\n    }\r\n}\r\nCdkTableExporter.decorators = [\r\n    { type: Directive }\r\n];\r\nCdkTableExporter.ctorParameters = () => [\r\n    { type: Renderer2 },\r\n    { type: ServiceLocatorService },\r\n    { type: DataExtractorService },\r\n    { type: undefined }\r\n];\r\nCdkTableExporter.propDecorators = {\r\n    hiddenColumns: [{ type: Input }],\r\n    exporter: [{ type: Input }],\r\n    exportCompleted: [{ type: Output }],\r\n    exportStarted: [{ type: Output }]\r\n};\n\n/*\r\n * Public API Surface of cdk-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { BOM, CHAR_SET_UTF, CHAR_SET_UTF_8, COMMA, CONTENT_TYPE_APPLICATION, CONTENT_TYPE_EXCEL, CONTENT_TYPE_TEXT, CdkTableExporter, CdkTableExporterModule, CsvExporterService, DOT, DataExtractorService, EXTENSION_CSV, EXTENSION_JSON, EXTENSION_TEXT, EXTENSION_XLS, EXTENSION_XLSX, ExportType, FileExporter, FileUtil, JsonExporterService, MAT_TABLE_EXPORTER, MIME_CSV, MIME_EXCEL_XLS, MIME_EXCEL_XLSX, MIME_JSON, MIME_TXT, Mime, REF, RETURN, ServiceLocatorService, TAB, TYPE_ARRAY, TxtExporterService, WorksheetExporter, XLSX_COLS, XLS_REGEX, XlsExporterService, XlsxExporterService };\n//# sourceMappingURL=cdk-table-exporter.js.map\n","\r\nimport { BaseComponent } from './../base-component';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { showCaseExamples } from '../add-to-showcase';\r\n\r\n@Component({\r\n  selector: 'app-exporter',\r\n  templateUrl: './exporter.component.html',\r\n  styleUrls: ['./exporter.component.css']\r\n})\r\nexport class ExporterComponent extends BaseComponent implements OnInit {\r\n\r\n  ngOnInit() {\r\n    this.examples = showCaseExamples.get('exporter');\r\n  }\r\n\r\n}\r\n","<p>Briefly demonstrates the basic usage of mat-table-filter.</p>\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\"\r\n[filterType]=\"filterType\" [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainName\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Name\" [(ngModel)]=\"filterEntity.captain.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain?.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainSurname\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Surname\" [(ngModel)]=\"filterEntity.captain.surname\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain?.surname}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"isConstitutionClass\">\r\n      <mat-header-cell *matHeaderCellDef>\r\n          <mat-slide-toggle\r\n          class=\"constitution-padding\"\r\n          [(ngModel)]=\"filterEntity.isConstitutionClass\">\r\n        Constitution Class\r\n      </mat-slide-toggle>\r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.isConstitutionClass}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","export const showCaseExamples: Map<string, Array<any>> = new Map();\r\n\r\nexport function AddToShowCase(categoryName: string, fileName: string, description: string) {\r\n  return (type: any) => {\r\n    type.prototype.fileName = fileName;\r\n    type.prototype.description = description;\r\n    const categoryArray = showCaseExamples.get(categoryName);\r\n    if (!categoryArray) {\r\n      const examples = new Array<any>();\r\n      examples.push(type);\r\n      showCaseExamples.set(categoryName, examples);\r\n    } else {\r\n      categoryArray.push(type);\r\n    }\r\n    return type;\r\n  };\r\n}\r\n","export class BaseComponent {\r\n\r\n  examples;\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","<p>Demonstrates how to handle filtering for specific properties of table items.</p>\r\n<p>In this example the table lists space-crafts. A space-craft has a captain. A captain has some properties.\r\n  Filtering for captain's name is done with an exact match. The rest of the properties are filtered with ANYWHERE filter type.\r\n</p>\r\n\r\n<!-- Filtering properties for captain.name are set to be an exact match by using propertyOptions binding-->\r\n<mat-table matTableFilter [exampleEntity]=\"filterEntity\" [propertyOptions]=\"propertyOptions\"\r\n[filterType]=\"filterType\" [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Name\" [(ngModel)]=\"filterEntity.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainName\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Name\" [(ngModel)]=\"filterEntity.captain.name\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain.name}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"captainSurname\">\r\n    <mat-header-cell *matHeaderCellDef>\r\n      <mat-form-field appearance=\"outline\">\r\n        <input matInput placeholder=\"Captain Surname\" [(ngModel)]=\"filterEntity.captain.surname\">\r\n      </mat-form-field>\r\n    </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\"> {{element.captain.surname}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"isConstitutionClass\">\r\n      <mat-header-cell *matHeaderCellDef>\r\n          <mat-slide-toggle\r\n          class=\"constitution-padding\"\r\n          [(ngModel)]=\"filterEntity.isConstitutionClass\">\r\n        Constitution Class\r\n      </mat-slide-toggle>\r\n      </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.isConstitutionClass}} </mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n","<header class=\"docs-header-background\">\r\n  <div class=\"docs-header-section\">\r\n      <a class=\"docs-header-container\" href=\"https://github.com/HalitTalha/mat-table-extensions\" target=\"_blank\">\r\n        <img class=\"docs-header-logo\" src=\"assets/logos/github.png\">\r\n        <a class=\"docs-header-headline\">/HalitTalha</a>\r\n        </a>\r\n    <div class=\"docs-header-headline\">\r\n      <h1 class=\"mat-h1\">ng-material-extensions</h1>\r\n      <h2> Extended features for Angular Material Components</h2>\r\n    </div>\r\n  </div>\r\n</header>\r\n  <mat-tab-group class=\"docs-tabs\" mat-align-tabs=\"center\">\r\n      <mat-tab label=\"mat-table-exporter\">\r\n        <app-exporter></app-exporter>\r\n      </mat-tab>\r\n      <mat-tab label=\"mat-table-filter\">\r\n        <app-filter></app-filter>\r\n      </mat-tab>\r\n  </mat-tab-group>\r\n<footer class=\"docs-footer\">\r\n  <div class=\"docs-footer-list\">\r\n    <div class=\"docs-footer-logo\">\r\n      <div class=\"footer-logo\">\r\n\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>\r\n","<p>Demonstrates how to export selected rows. Having no row selected means to export all.</p>\r\n\r\n<div class=\"example-container mat-elevation-z8\">\r\n  <mat-table matTableExporter [dataSource]=\"dataSource\" #exporter=\"matTableExporter\" [hiddenColumns]=\"[0]\">\r\n\r\n  <!-- Checkbox Column -->\r\n  <ng-container matColumnDef=\"select\">\r\n    <th mat-header-cell *matHeaderCellDef>\r\n      Select\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let row; let i = index\">\r\n      <mat-checkbox (click)=\"$event.stopPropagation()\"\r\n                    (change)=\"$event ? toggleRow(row, i) : null\"\r\n                    [checked]=\"selection.isSelected(row)\"\r\n                    [aria-label]=\"checkboxLabel(row)\">\r\n      </mat-checkbox>\r\n    </td>\r\n  </ng-container>\r\n\r\n    <ng-container matColumnDef=\"position\">\r\n      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.position}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <mat-header-cell *matHeaderCellDef> Surname </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.surname}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"birth\">\r\n      <mat-header-cell *matHeaderCellDef> Birth </mat-header-cell>\r\n      <mat-cell *matCellDef=\"let element\"> {{element.birth}} </mat-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n  </mat-table>\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n<div>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('xlsx', {sheet: 'sheet_name', Props: {Author: 'Talha'}, columnWidths: [50, 5, 3]})\">Excel</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('csv')\">Csv</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('json')\">Json</button>\r\n  <button mat-raised-button (click)=\"exporter.exportTable('txt')\">Txt</button>\r\n</div>\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}